/*
Deployment script for BenchmarkResultsDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BenchmarkResultsDb"
:setvar DefaultFilePrefix "BenchmarkResultsDb"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                DATE_CORRELATION_OPTIMIZATION OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = AUTO, OPERATION_MODE = READ_WRITE, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 30), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [week_partition_function]...';


GO
CREATE PARTITION FUNCTION [week_partition_function](INT)
    AS RANGE
    FOR VALUES (1, 2, 3, 4, 5, 6, 7, 8);


GO
PRINT N'Creating [week_partition_scheme]...';


GO
CREATE PARTITION SCHEME [week_partition_scheme]
    AS PARTITION [week_partition_function]
    ALL TO ([PRIMARY]);


GO
PRINT N'Creating [dbo].[instance_state]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[instance_state] (
    [instance_id]                 INT             IDENTITY (1, 1) NOT NULL,
    [instance_environment]        VARCHAR (50)    NULL,
    [region]                      VARCHAR (100)   NULL,
    [instance_name]               NVARCHAR (1000) NOT NULL,
    [last_state_change_timestamp] DATETIME2 (0)   NULL,
    [state]                       NVARCHAR (128)  NOT NULL,
    CONSTRAINT [pk_instance_state] PRIMARY KEY CLUSTERED ([instance_id] ASC),
    UNIQUE NONCLUSTERED ([instance_name] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[benchmark_step_reports]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[benchmark_step_reports] (
    [id]           BIGINT         IDENTITY (1, 1) NOT NULL,
    [run_id]       BIGINT         NOT NULL,
    [timestamp]    DATETIME2 (0)  NOT NULL,
    [metric_name]  NVARCHAR (128) NOT NULL,
    [metric_value] FLOAT (53)     NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[benchmark_step_reports].[nci_benchmark_step_reports_run_id]...';


GO
CREATE NONCLUSTERED INDEX [nci_benchmark_step_reports_run_id]
    ON [dbo].[benchmark_step_reports]([run_id] ASC, [timestamp] ASC)
    INCLUDE([metric_name], [metric_value]);


GO
PRINT N'Creating [dbo].[tracing_logs]...';


GO
CREATE TABLE [dbo].[tracing_logs] (
    [tracing_log_id]   BIGINT           IDENTITY (0, 1) NOT NULL,
    [timestamp]        DATETIME         NOT NULL,
    [level]            INT              NOT NULL,
    [event_name]       NVARCHAR (128)   NOT NULL,
    [event_message]    NVARCHAR (MAX)   NULL,
    [stack_trace]      NVARCHAR (MAX)   NULL,
    [correlation_id]   UNIQUEIDENTIFIER NOT NULL,
    [vm_name]          NVARCHAR (128)   NULL,
    [server_name]      NVARCHAR (128)   NULL,
    [database_name]    NVARCHAR (128)   NULL,
    [partition_number] AS               (datediff(day, CONVERT (DATETIME, (0)), [timestamp]) % (9) + (1)) PERSISTED NOT NULL,
    CONSTRAINT [pk_tracing_logs] PRIMARY KEY CLUSTERED ([tracing_log_id] ASC, [partition_number] ASC) ON [week_partition_scheme] ([partition_number])
);


GO
PRINT N'Creating [dbo].[tracing_logs].[nci_tracing_logs_correlation_id_event_name]...';


GO
CREATE NONCLUSTERED INDEX [nci_tracing_logs_correlation_id_event_name]
    ON [dbo].[tracing_logs]([correlation_id] ASC, [event_name] ASC)
    ON [week_partition_scheme] ([partition_number]);


GO
PRINT N'Creating [dbo].[tracing_logs].[nci_tracing_logs_event_name]...';


GO
CREATE NONCLUSTERED INDEX [nci_tracing_logs_event_name]
    ON [dbo].[tracing_logs]([event_name] ASC, [timestamp] ASC)
    ON [week_partition_scheme] ([partition_number]);


GO
PRINT N'Creating [dbo].[tracing_logs].[nci_tracing_logs_server_database_name]...';


GO
CREATE NONCLUSTERED INDEX [nci_tracing_logs_server_database_name]
    ON [dbo].[tracing_logs]([server_name] ASC, [database_name] ASC, [timestamp] ASC)
    ON [week_partition_scheme] ([partition_number]);


GO
PRINT N'Creating [dbo].[benchmark_results]...';


GO
CREATE TABLE [dbo].[benchmark_results] (
    [id]           BIGINT        IDENTITY (1, 1) NOT NULL,
    [run_id]       BIGINT        NOT NULL,
    [metric_name]  VARCHAR (128) NOT NULL,
    [metric_value] FLOAT (53)    NOT NULL,
    CONSTRAINT [pk_benchmark_results] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[benchmark_results].[nci_benchmark_results_run_id]...';


GO
CREATE NONCLUSTERED INDEX [nci_benchmark_results_run_id]
    ON [dbo].[benchmark_results]([run_id] ASC);


GO
PRINT N'Creating [dbo].[job_definitions]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[job_definitions] (
    [id]          INT            IDENTITY (1, 1) NOT NULL,
    [name]        NVARCHAR (450) NOT NULL,
    [configs]     NVARCHAR (MAX) NULL,
    [description] NVARCHAR (MAX) NULL,
    CONSTRAINT [pk_job_definition] PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([name] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[jobs]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[jobs] (
    [id]          INT             IDENTITY (1, 1) NOT NULL,
    [name]        NVARCHAR (MAX)  NOT NULL,
    [configs]     NVARCHAR (MAX)  NULL,
    [description] NVARCHAR (MAX)  NULL,
    [state]       NVARCHAR (1024) NOT NULL,
    CONSTRAINT [pk_jobs] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[config_override]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[config_override] (
    [id]                          INT            NOT NULL,
    [config_override]             NVARCHAR (MAX) NULL,
    [config_names]                NVARCHAR (MAX) NULL,
    [config_values]               NVARCHAR (MAX) NULL,
    [instance_settings_overrides] NVARCHAR (MAX) NULL,
    [database_settings_overrides] NVARCHAR (MAX) NULL,
    [slo_property_bag_overrides]  NVARCHAR (MAX) NULL,
    [trace_flags]                 NVARCHAR (MAX) NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[scheduled_benchmark_actions]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[scheduled_benchmark_actions] (
    [action_id]                INT            IDENTITY (1, 1) NOT NULL,
    [scheduled_benchmark_id]   INT            NOT NULL,
    [action_type]              VARCHAR (100)  NOT NULL,
    [required_benchmark_state] VARCHAR (100)  NULL,
    [offset_seconds]           INT            NULL,
    [action_parameters]        NVARCHAR (MAX) NULL,
    CONSTRAINT [pk_scheduled_benchmark_actions] PRIMARY KEY CLUSTERED ([action_id] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[scheduled_benchmark_actions].[nci_scheduled_benchmark_id]...';


GO
CREATE NONCLUSTERED INDEX [nci_scheduled_benchmark_id]
    ON [dbo].[scheduled_benchmark_actions]([scheduled_benchmark_id] ASC);


GO
PRINT N'Creating [dbo].[benchmark_action_executions]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[benchmark_action_executions] (
    [action_execution_id] BIGINT         IDENTITY (1, 1) NOT NULL,
    [run_id]              BIGINT         NULL,
    [action_id]           INT            NOT NULL,
    [executed_time_utc]   DATETIME2 (0)  NULL,
    [execution_result]    NVARCHAR (MAX) NULL,
    CONSTRAINT [pk_benchmark_actions] PRIMARY KEY CLUSTERED ([action_execution_id] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[slo_benchmark_config]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[slo_benchmark_config] (
    [processor_count]            INT             NOT NULL,
    [hardware_generation]        NVARCHAR (128)  NOT NULL,
    [is_bc]                      BIT             NOT NULL,
    [benchmark_name]             NVARCHAR (128)  NOT NULL,
    [worker_number]              INT             NOT NULL,
    [benchmark_scaling_argument] INT             NOT NULL,
    [scaled_down]                BIT             NOT NULL,
    [server_name]                NVARCHAR (1000) NOT NULL,
    [database_name]              NVARCHAR (128)  NOT NULL,
    [warmup_timespan_minutes]    INT             NOT NULL,
    [run_timespan_minutes]       INT             NOT NULL,
    [custom_master_tsql_query]   NVARCHAR (MAX)  NULL,
    [required_processor_count]   INT             NOT NULL,
    [parallel_exec_cnt]          INT             NOT NULL,
    [environment]                NVARCHAR (50)   NOT NULL,
    [region]                     VARCHAR (100)   NULL,
    [email_address]              NVARCHAR (512)  NULL,
    CONSTRAINT [PK_slo_benchmark_config] PRIMARY KEY CLUSTERED ([processor_count] ASC, [hardware_generation] ASC, [is_bc] ASC, [benchmark_name] ASC, [environment] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[adhoc_run_configs]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[adhoc_run_configs] (
    [id]                         INT              NOT NULL,
    [worker_number]              INT              NOT NULL,
    [benchmark_scaling_argument] INT              NOT NULL,
    [scaled_down]                BIT              NOT NULL,
    [region]                     VARCHAR (100)    NULL,
    [server_name]                NVARCHAR (1000)  NOT NULL,
    [database_name]              NVARCHAR (128)   NOT NULL,
    [warmup_timespan_minutes]    INT              NOT NULL,
    [run_timespan_minutes]       INT              NOT NULL,
    [custom_master_tsql_query]   NVARCHAR (MAX)   NULL,
    [required_processor_count]   INT              NULL,
    [parallel_exec_cnt]          INT              NULL,
    [priority]                   INT              NOT NULL,
    [should_restore]             BIT              NOT NULL,
    [correlation_id]             UNIQUEIDENTIFIER NOT NULL,
    [scheduled_by]               NVARCHAR (1024)  NULL,
    [comment]                    NVARCHAR (MAX)   NULL,
    CONSTRAINT [pk_adhoc_run_configs] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[adhoc_run_configs].[nci_adhoc_run_configs_priority_id]...';


GO
CREATE NONCLUSTERED INDEX [nci_adhoc_run_configs_priority_id]
    ON [dbo].[adhoc_run_configs]([priority] DESC, [id] ASC);


GO
PRINT N'Creating [dbo].[scheduled_benchmarks]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[scheduled_benchmarks] (
    [id]                  INT            IDENTITY (1, 1) NOT NULL,
    [job_id]              INT            NULL,
    [is_adhoc_run]        BIT            NOT NULL,
    [processor_count]     INT            NOT NULL,
    [parallel_exec_cnt]   INT            NOT NULL,
    [hardware_generation] NVARCHAR (128) NOT NULL,
    [is_bc]               BIT            NOT NULL,
    [benchmark_name]      NVARCHAR (128) NOT NULL,
    [environment]         NVARCHAR (50)  NOT NULL,
    [is_picked_up]        BIGINT         NOT NULL,
    CONSTRAINT [pk_scheduled_benchmarks] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[scheduled_benchmarks].[nci_scheduled_benchmarks_environment_include_is_picked_up]...';


GO
CREATE NONCLUSTERED INDEX [nci_scheduled_benchmarks_environment_include_is_picked_up]
    ON [dbo].[scheduled_benchmarks]([environment] ASC)
    INCLUDE([is_picked_up]);


GO
PRINT N'Creating [dbo].[benchmark_runs]...';


GO
CREATE TABLE [dbo].[benchmark_runs] (
    [run_id]                 BIGINT           IDENTITY (1, 1) NOT NULL,
    [scheduled_benchmark_id] BIGINT           NULL,
    [correlation_id]         UNIQUEIDENTIFIER NULL,
    [instance_id]            INT              NULL,
    [start_time]             DATETIME2 (0)    NOT NULL,
    [end_time]               DATETIME2 (0)    NULL,
    [benchmark_name]         VARCHAR (128)    NOT NULL,
    [processor_count]        INT              NOT NULL,
    [parallel_exec_cnt]      INT              NOT NULL,
    [hardware_generation]    VARCHAR (128)    NOT NULL,
    [is_bc]                  BIT              NOT NULL,
    [environment]            VARCHAR (128)    NULL,
    [comment]                NVARCHAR (MAX)   NULL,
    [mail_sent]              BIT              NULL,
    CONSTRAINT [pk_benchmark_runs] PRIMARY KEY CLUSTERED ([run_id] ASC)
);


GO
PRINT N'Creating [dbo].[benchmark_runs].[nci_benchmark_runs_start_time]...';


GO
CREATE NONCLUSTERED INDEX [nci_benchmark_runs_start_time]
    ON [dbo].[benchmark_runs]([start_time] DESC);


GO
PRINT N'Creating [dbo].[benchmark_runs].[nci_benchmark_runs_end_time_mail_sent]...';


GO
CREATE NONCLUSTERED INDEX [nci_benchmark_runs_end_time_mail_sent]
    ON [dbo].[benchmark_runs]([scheduled_benchmark_id] ASC, [run_id] ASC, [mail_sent] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[jobs]...';


GO
ALTER TABLE [dbo].[jobs]
    ADD DEFAULT 'Scheduled' FOR [state];


GO
PRINT N'Creating unnamed constraint on [dbo].[slo_benchmark_config]...';


GO
ALTER TABLE [dbo].[slo_benchmark_config]
    ADD DEFAULT 'clperfdevs@service.microsoft.com' FOR [email_address];


GO
PRINT N'Creating unnamed constraint on [dbo].[scheduled_benchmarks]...';


GO
ALTER TABLE [dbo].[scheduled_benchmarks]
    ADD DEFAULT (0) FOR [is_adhoc_run];


GO
PRINT N'Creating [dbo].[fk_benchmark_results_run_id]...';


GO
ALTER TABLE [dbo].[benchmark_results]
    ADD CONSTRAINT [fk_benchmark_results_run_id] FOREIGN KEY ([run_id]) REFERENCES [dbo].[benchmark_runs] ([run_id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_config_override_id]...';


GO
ALTER TABLE [dbo].[config_override]
    ADD CONSTRAINT [fk_config_override_id] FOREIGN KEY ([id]) REFERENCES [dbo].[scheduled_benchmarks] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_scheduled_benchmark_id]...';


GO
ALTER TABLE [dbo].[scheduled_benchmark_actions]
    ADD CONSTRAINT [fk_scheduled_benchmark_id] FOREIGN KEY ([scheduled_benchmark_id]) REFERENCES [dbo].[scheduled_benchmarks] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_run_id_benchmark_runs]...';


GO
ALTER TABLE [dbo].[benchmark_action_executions]
    ADD CONSTRAINT [fk_run_id_benchmark_runs] FOREIGN KEY ([run_id]) REFERENCES [dbo].[benchmark_runs] ([run_id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_action_id_scheduled_benchmark_actions]...';


GO
ALTER TABLE [dbo].[benchmark_action_executions]
    ADD CONSTRAINT [fk_action_id_scheduled_benchmark_actions] FOREIGN KEY ([action_id]) REFERENCES [dbo].[scheduled_benchmark_actions] ([action_id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_scheduled_benchmarks]...';


GO
ALTER TABLE [dbo].[adhoc_run_configs]
    ADD CONSTRAINT [fk_scheduled_benchmarks] FOREIGN KEY ([id]) REFERENCES [dbo].[scheduled_benchmarks] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_scheduled_benchmarks_slo_name_benchmark_name_environment]...';


GO
ALTER TABLE [dbo].[scheduled_benchmarks]
    ADD CONSTRAINT [fk_scheduled_benchmarks_slo_name_benchmark_name_environment] FOREIGN KEY ([processor_count], [hardware_generation], [is_bc], [benchmark_name], [environment]) REFERENCES [dbo].[slo_benchmark_config] ([processor_count], [hardware_generation], [is_bc], [benchmark_name], [environment]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_jobs]...';


GO
ALTER TABLE [dbo].[scheduled_benchmarks]
    ADD CONSTRAINT [fk_jobs] FOREIGN KEY ([job_id]) REFERENCES [dbo].[jobs] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_instance_id_instance_state]...';


GO
ALTER TABLE [dbo].[benchmark_runs]
    ADD CONSTRAINT [fk_instance_id_instance_state] FOREIGN KEY ([instance_id]) REFERENCES [dbo].[instance_state] ([instance_id]);


GO
PRINT N'Creating [dbo].[tracing_logs_level_check]...';


GO
ALTER TABLE [dbo].[tracing_logs]
    ADD CONSTRAINT [tracing_logs_level_check] CHECK ([level] >= 1 AND [level] <= 3);


GO
PRINT N'Creating [dbo].[occupied_instances_view]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: occupied_instances_view.sql
--
-- @Owner: v-milast
--
-- Purpose:
-- View of occupied instances (that are currently running)
--
-- *********************************************************************
CREATE VIEW [dbo].[occupied_instances_view]
AS
    SELECT [instance_name]
    FROM [instance_state]
    WHERE [state] != 'Ready'
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[scheduled_benchmarks_view]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: scheduled_benchmarks_view.sql
--
-- @Owner: anjov
--
-- Purpose:
-- View over all types of scheduled benchmarks (regular and ad-hoc).
--
-- *********************************************************************
CREATE VIEW dbo.scheduled_benchmarks_view
WITH SCHEMABINDING
AS
    SELECT
        sb.id,
        sb.job_id,
        sb.benchmark_name,
        sb.environment,
        sb.hardware_generation,
        sb.processor_count,
		sb.parallel_exec_cnt,
        sb.is_bc,
        sb.is_picked_up,
        sb.is_adhoc_run,
        benchmark_scaling_argument = ISNULL(sar.benchmark_scaling_argument, sbc.benchmark_scaling_argument),
        sar.correlation_id,
        custom_master_tsql_query = ISNULL(sar.custom_master_tsql_query, sbc.custom_master_tsql_query),
        region = ISNULL(sar.region, sbc.region),
        server_name = ISNULL(sar.server_name, sbc.server_name),
        [database_name] = ISNULL(sar.[database_name], sbc.[database_name]),
        sar.[priority],
        required_processor_count = ISNULL(sar.required_processor_count, sbc.required_processor_count),
        scaled_down = ISNULL(sar.scaled_down, sbc.scaled_down),
        worker_number = ISNULL(sar.worker_number, sbc.worker_number),
        sar.scheduled_by,
        sar.should_restore,
        warmup_timespan_minutes = ISNULL(sar.warmup_timespan_minutes, sbc.warmup_timespan_minutes),
        run_timespan_minutes = ISNULL(sar.run_timespan_minutes, sbc.run_timespan_minutes),
        mail_to = ISNULL(sar.scheduled_by, sbc.email_address)
    FROM
        dbo.scheduled_benchmarks sb
            LEFT OUTER JOIN
        dbo.adhoc_run_configs sar
            ON sb.id = sar.id
            INNER JOIN
        dbo.slo_benchmark_config sbc
            ON sbc.benchmark_name = sb.benchmark_name
            AND sbc.environment = sb.environment
            AND sbc.processor_count = sb.processor_count
            AND sbc.hardware_generation = sb.hardware_generation
            AND sbc.is_bc = sb.is_bc
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[benchmark_runs_view]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: benchmark_runs_view.sql
--
-- @Owner: anjov
--
-- Purpose:
-- View over benchmark runs, incorporating data from scheduled_benchmarks and benchmark_results.
--
-- *********************************************************************
CREATE VIEW dbo.benchmark_runs_view
AS
    SELECT 
        br.run_id,
        br.instance_id,
        br.start_time,
        br.end_time,
        sbv.id,
        sbv.job_id,
        sbv.benchmark_name,
        benchmark_environment = sbv.environment,
        ist.instance_environment,
        ist.region,
        sbv.hardware_generation,
        sbv.server_name,
        sbv.[database_name],
        sbv.processor_count,
		sbv.parallel_exec_cnt,
        sbv.is_bc,
        sbv.is_picked_up,
        sbv.is_adhoc_run,
        sbv.benchmark_scaling_argument,
        sbv.correlation_id,
        sbv.custom_master_tsql_query,
        sbv.[priority],
        required_processor_count,
        scaled_down ,
        worker_number,
        scheduled_by,
        should_restore,
        warmup_timespan_minutes,
        run_timespan_minutes,
        instance_state = ist.[state],
        executed_actions = ( 
            SELECT a.action_type, ae.executed_time_utc 
            FROM scheduled_benchmark_actions a INNER JOIN benchmark_action_executions ae ON ae.action_id = a.action_id
            WHERE ae.run_id = br.run_id AND ae.executed_time_utc IS NOT NULL
            FOR JSON AUTO),
        benchmark_results = 
            (SELECT metric_name, metric_value FROM benchmark_results WHERE run_id = br.run_id FOR JSON AUTO)
		
    FROM 
        benchmark_runs br
            INNER JOIN
        scheduled_benchmarks_view sbv
            ON br.scheduled_benchmark_id = sbv.id
            INNER JOIN
        instance_state ist
            ON br.instance_id = ist.instance_id
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[unsent_benchmark_results_view]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: unsent_benchmark_results_view.sql
--
-- @Owner: v-milast
--
-- Purpose:
-- View used to see what emails with results were not sent
--
-- *********************************************************************
CREATE VIEW [dbo].[unsent_benchmark_results_view]
    AS
        SELECT
        b.run_id,
        b.start_time,
        b.end_time,
        b.environment,
        b.is_bc,
        b.processor_count,
        b.hardware_generation,
        b.benchmark_name,
        s.benchmark_scaling_argument,
        s.server_name,
        s.database_name,
        s.worker_number,
        s.scheduled_by,
        s.run_timespan_minutes,
        CONCAT('{', STRING_AGG(CONCAT('"', br.metric_name, '":', br.metric_value), ','), '}') AS metric_values
    FROM benchmark_runs b
    INNER JOIN scheduled_benchmarks_view s on s.id = b.scheduled_benchmark_id
    INNER join benchmark_results br on b.run_id = br.run_id
    WHERE b.mail_sent = 0
    GROUP BY
        b.run_id,
        b.start_time,
        b.end_time,
        b.environment,
        b.is_bc,
        b.processor_count,
        b.hardware_generation,
        b.benchmark_name,
        s.benchmark_scaling_argument,
        s.server_name,
        s.database_name,
        s.worker_number,
        s.scheduled_by,
        s.run_timespan_minutes
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[get_pending_benchmark_actions]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: pending_benchmark_actions_view.sql
--
-- @Owner: anjov
--
-- Purpose:
-- View over all types of scheduled benchmarks (regular and ad-hoc).
--
-- *********************************************************************
CREATE FUNCTION dbo.get_pending_benchmark_actions
(
	@environment VARCHAR(50),
	@region VARCHAR(100),
	@maximum_target_time_utc DATETIME2(0)
)
RETURNS TABLE
AS 
	RETURN SELECT
		ba.action_execution_id,
		ist.instance_name,
		sba.action_type,
		sba.action_parameters,
		target_time_utc = DATEADD(SECOND, sba.offset_seconds, ist.last_state_change_timestamp)
	FROM 
		dbo.benchmark_action_executions ba
			INNER JOIN
		dbo.scheduled_benchmark_actions sba
			ON ba.action_id = sba.action_id
			INNER JOIN
		dbo.scheduled_benchmarks_view sbv
			ON sba.scheduled_benchmark_id = sbv.id
			INNER JOIN
		dbo.instance_state ist
			ON ist.instance_name = sbv.server_name
	WHERE
		ist.instance_environment = @environment
		AND ist.region = @region
		AND ist.[state] = sba.required_benchmark_state
		AND sbv.is_picked_up = 1
		AND executed_time_utc IS NULL -- don't take already executed actions
		AND execution_result IS NULL
		AND DATEADD(SECOND, sba.offset_seconds, ist.last_state_change_timestamp) < @maximum_target_time_utc
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[parse_job]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ************************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: parse_job.sql
--
-- @Owner: v-dukut
--
-- Purpose: Parsing json column configs from jobs table
--			job -> table of benchmarks
--
-- ************************************************************************

CREATE FUNCTION [dbo].[parse_job]
(
	@job_id INT
)

RETURNS @runs TABLE
(
		config_names NVARCHAR(MAX) NULL,
		config_values NVARCHAR(MAX) NULL,
		instance_settings_overrides NVARCHAR(MAX) NULL,
		database_settings_overrides NVARCHAR(MAX) NULL,
		slo_property_bag_overrides NVARCHAR(MAX) NULL,
		trace_flags NVARCHAR(MAX) NULL, 

		benchmark_name NVARCHAR(64) NOT NULL, -- CDB|TPCC|DataLoading
		processor_count INT NOT NULL,
		is_bc BIT NOT NULL,
		hardware_generation NVARCHAR(64) NOT NULL, --G5|G4|SVMTight|SVMLoose
		environment  NVARCHAR(64) NOT NULL, --ProdG5|ProdG4|Stage|SVMTight|SVMLoose

		should_restore BIT NULL,
		priority_ INT NULL,
		worker_number INT NULL,
		benchmark_scaling_argument INT NULL,
		scaled_down BIT NULL,
		region VARCHAR(100) NULL,
		server_name NVARCHAR(1000) NULL,
		database_name_ NVARCHAR(128) NULL,
		warmup_timespan_minutes INT NULL,
		run_timespan_minutes INT NULL,
		custom_master_tsql_query NVARCHAR(MAX) NULL,
		required_processor_count INT NULL,
		scheduled_by NVARCHAR(1024) NULL,
		comment NVARCHAR(MAX) NULL
)
AS 
BEGIN
		DECLARE @job NVARCHAR(MAX) 
		SELECT @job = configs
		FROM jobs
		WHERE id = @job_id

		INSERT @runs
		SELECT *
		FROM OPENJSON (@job, '$.Benchmarks')
		WITH (
			config_names NVARCHAR(MAX) '$.InstanceConfigs.ConfigParamOverrides.ConfigNames',
			config_values NVARCHAR(MAX) '$.InstanceConfigs.ConfigParamOverrides.ConfigValues',
			instance_settings_overrides NVARCHAR(MAX) '$.InstanceConfigs.InstanceSettingsOverrides',
			database_settings_overrides NVARCHAR(MAX) '$.InstanceConfigs.DatabaseSettingsOverrides',
			slo_property_bag_overrides NVARCHAR(MAX) '$.InstanceConfigs.SloPropertyBagOverrides',
			trace_flags NVARCHAR(MAX) '$.InstanceConfigs.TraceFlags',

			benchmark_name NVARCHAR(64) '$.BenchmarkConfigs.BenchmarkName', 
			processor_count INT '$.BenchmarkConfigs.ProcessorCount',
			is_bc BIT '$.BenchmarkConfigs.IsBc',
			hardware_generation nvarchar(64) '$.BenchmarkConfigs.HardwareGeneration', 
			environment NVARCHAR(64) '$.BenchmarkConfigs.Environment',

			should_restore BIT '$.BenchmarkConfigs.ShouldRestore',
			priority_ INT '$.BenchmarkConfigs.Priority',
			worker_number INT '$.BenchmarkConfigs.WorkerNumber',
			benchmark_scaling_argument INT '$.BenchmarkConfigs.BenchmarkScalingArgument',
			scaled_down BIT '$.BenchmarkConfigs.ScaledDown',
			region VARCHAR(100) '$.BenchmarkConfigs.Region',
			server_name NVARCHAR(1000) '$.BenchmarkConfigs.ServerName',
			database_name_ NVARCHAR(128) '$.BenchmarkConfigs.DatabaseName',
			warmup_timespan_minutes INT '$.BenchmarkConfigs.WarmupTimespanMinutes',
			run_timespan_minutes INT '$.BenchmarkConfigs.RunTimespanMinutes',
			custom_master_tsql_query NVARCHAR(MAX) '$.BenchmarkConfigs.CustomMasterTSQLQuery',
			required_processor_count INT '$.BenchmarkConfigs.RequiredProcessorCount',
			scheduled_by NVARCHAR(1024) '$.BenchmarkConfigs.ScheduledBy',
			comment NVARCHAR(MAX) '$.BenchmarkConfigs.Comment'
			)

		UPDATE @runs SET priority_ = 0
		WHERE priority_ IS NULL

		UPDATE @runs SET should_restore = 1
		WHERE should_restore IS NULL

		

		RETURN
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[test_cleanup]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: test_cleanup.sql
--
-- @Owner: v-milast
--
-- Purpose:
-- Cleanup function for tests
--
-- *********************************************************************
CREATE PROCEDURE [dbo].[test_cleanup]
AS
BEGIN
    -- Delete everything from scheduled benchmarks
    DELETE FROM [scheduled_benchmarks]
    WHERE [environment] = 'UnitTest'

    DELETE FROM [benchmark_runs]
    WHERE [environment] = 'UnitTest'

    -- DELETE all test instances
    DELETE FROM [instance_state]
    WHERE [instance_name] LIKE 'unittestsvr%'

    -- Delete everything from default configs for UnitTest env
    DELETE FROM [slo_benchmark_config]
    WHERE [environment] = 'UnitTest'
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[upsert_instance]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: upsert_instance.sql
--
-- @Owner: v-milast
--
-- Purpose:
-- This SP upserts information about instance.
--
-- *********************************************************************
CREATE PROCEDURE [dbo].[upsert_instance]
    @instance_name NVARCHAR(1000),
    @state NVARCHAR(128),
    @instance_environment VARCHAR(50) = NULL,
    @region VARCHAR(100) = NULL
AS
BEGIN
    MERGE [instance_state] AS target
    USING (
        SELECT
            @instance_name AS [instance_name],
            @instance_environment AS [instance_environment],
            @region AS [region],
            @state AS [state]
    ) AS source
    ON (target.[instance_name] = source.[instance_name])
        WHEN MATCHED THEN
        UPDATE SET
            [state] = [source].[state],
            [last_state_change_timestamp] = GETUTCDATE()
        WHEN NOT MATCHED THEN
        INSERT
        (
            [instance_name],
            [instance_environment],
            [region],
            [state],
            [last_state_change_timestamp]
        ) VALUES
        (
            [source].[instance_name],
            [source].[instance_environment],
            [source].[region],
            [source].[state],
            GETUTCDATE()
        );
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[end_benchmark]...';


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: end_benchmark.sql
--
-- @Owner: v-milast
--
-- *********************************************************************
CREATE PROCEDURE [end_benchmark]
	@run_id BIGINT
AS
BEGIN
	UPDATE [benchmark_runs]
	SET end_time = GETUTCDATE()
	WHERE [run_id] = @run_id
END
GO
PRINT N'Creating [dbo].[trace]...';


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: trace.sql
--
-- @Owner: stlazi
--
-- Purpose:
-- This procedure store trace into a tracing table.
--
-- Parameters:
-- level :: 1/info; 2/warning; 3/error
-- event_name :: name of the event that is being traced
-- event_message :: basic message for the event that is being traced
-- correlation_id :: id that enables correlation between different traces that should be tracked together.
-- server_name :: server name
-- database_name :: database name
--
-- *********************************************************************

CREATE PROCEDURE [dbo].[trace]
(
	@level INT,
	@event_name NVARCHAR(128),
	@event_message NVARCHAR(MAX),
	@correlation_id UNIQUEIDENTIFIER,
	@vm_name NVARCHAR(128) = NULL,
	@server_name NVARCHAR(128) = NULL,
	@database_name NVARCHAR(128) = NULL,
	@stack_trace NVARCHAR(128) = NULL
)
WITH EXECUTE AS OWNER
AS
BEGIN
	INSERT INTO [dbo].[tracing_logs] ([timestamp], [level], [event_name], [event_message], [stack_trace], [correlation_id], [vm_name], [server_name], [database_name])
		VALUES (GETUTCDATE(), @level, @event_name, @event_message, @stack_trace, @correlation_id, @vm_name, @server_name, @database_name);
END
GO
PRINT N'Creating [dbo].[mark_mail_sent]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: mark_mail_sent.sql
--
-- @Owner: v-milast
--
-- Purpose:
-- SP used to mark that mail is sent for given benchmark run
--
-- *********************************************************************
CREATE PROCEDURE [dbo].[mark_mail_sent]
    @run_id BIGINT
AS
BEGIN
    UPDATE [benchmark_runs]
    SET [mail_sent] = 1
    WHERE [run_id] = @run_id
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[add_action_to_scheduled_benchmark]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: add_action_to_scheduled_benchmark.sql
--
-- @Owner: anjov
--
-- *********************************************************************
CREATE PROCEDURE dbo.add_action_to_scheduled_benchmark
    @scheduled_benchmark_id INT,
    @action_type VARCHAR(100),
    @required_benchmark_state VARCHAR(100),
    @offset_seconds INT,
    @action_parameters_json NVARCHAR(MAX)
AS
    INSERT INTO dbo.scheduled_benchmark_actions
        (scheduled_benchmark_id, action_type, required_benchmark_state, offset_seconds, action_parameters)
    VALUES
        (@scheduled_benchmark_id, @action_type, @required_benchmark_state, @offset_seconds, @action_parameters_json)

    INSERT INTO benchmark_action_executions
            (run_id, action_id, executed_time_utc)
                SELECT NULL, action_id, NULL
                FROM scheduled_benchmark_actions
                WHERE scheduled_benchmark_id = @scheduled_benchmark_id
                AND action_type = @action_type
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[schedule_adhoc_benchmark]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: schedule_adhoc_benchmark.sql
--
-- @Owner: v-milast
--
-- Stored procedure used to schedule adhoc runs, with desired parameters set as override.
-- If some argument is not specified default value is taken for that SLO
--
-- *********************************************************************
CREATE PROCEDURE [dbo].[schedule_adhoc_benchmark]
    @action_name NVARCHAR(64),
    @processor_count INT,
    @hardware_generation NVARCHAR(64),
    @environment NVARCHAR(64),
    @is_bc BIT,
    @should_restore BIT = 1,
    @priority INT = 0,
    @worker_number INT = NULL,
    @benchmark_scaling_argument INT = NULL,
    @scaled_down BIT = NULL,
    @region VARCHAR(100) = NULL,
    @server_name NVARCHAR(1000) = NULL,
    @database_name NVARCHAR(128) = NULL,
    @warmup_timespan_minutes INT = NULL,
    @run_timespan_minutes INT = NULL,
    @custom_master_tsql_query NVARCHAR(MAX) = NULL,
    @required_processor_count INT = NULL,
	@parallel_exec_cnt INT = NULL, 
    @scheduled_by NVARCHAR(1024) = NULL,
    @comment NVARCHAR(MAX) = NULL,
    @scheduled_benchmark_id INT = NULL OUTPUT
AS
BEGIN
    SELECT
        @worker_number = COALESCE(@worker_number, [worker_number]),
        @benchmark_scaling_argument = COALESCE(@benchmark_scaling_argument, [benchmark_scaling_argument]),
        @scaled_down = COALESCE(@scaled_down, [scaled_down]),
        @region = COALESCE(@region, [region]),
        @server_name = COALESCE(@server_name, [server_name]),
        @database_name = COALESCE(@database_name, [database_name]),
        @warmup_timespan_minutes = COALESCE(@warmup_timespan_minutes, [warmup_timespan_minutes]),
        @run_timespan_minutes = COALESCE(@run_timespan_minutes, [run_timespan_minutes]),
        @custom_master_tsql_query = COALESCE(@custom_master_tsql_query, [custom_master_tsql_query]),
        @required_processor_count = COALESCE(@required_processor_count, [required_processor_count]),
		@parallel_exec_cnt  = COALESCE(@parallel_exec_cnt, [parallel_exec_cnt])
    FROM [slo_benchmark_config]
    WHERE [benchmark_name] = @action_name
    AND [environment] = @environment
    AND [processor_count] = @processor_count
    AND [hardware_generation] = @hardware_generation
    AND [is_bc] = @is_bc

    IF @scheduled_by IS NOT NULL
        SET @scheduled_by = CONCAT(@scheduled_by, '@microsoft.com')
    ELSE IF (CHARINDEX('@microsoft', SUSER_NAME()) > 0)
        SET @scheduled_by = SUSER_NAME()

    BEGIN TRANSACTION

        INSERT INTO [dbo].[scheduled_benchmarks]
            ([is_adhoc_run], [processor_count], [parallel_exec_cnt], [hardware_generation], [is_bc], [benchmark_name], [environment], [is_picked_up])
        VALUES
            (1, @processor_count, @parallel_exec_cnt, @hardware_generation, @is_bc, @action_name, @environment, 0)

        SET @scheduled_benchmark_id = SCOPE_IDENTITY()

        INSERT INTO [dbo].[adhoc_run_configs]
        (
            [id],
            [worker_number],
            [benchmark_scaling_argument],
            [scaled_down],
            [region],
            [server_name],
            [database_name],
            [warmup_timespan_minutes],
            [run_timespan_minutes],
            [custom_master_tsql_query],
            [required_processor_count],
			[parallel_exec_cnt],
            [priority],
            [should_restore],
            [correlation_id],
            [scheduled_by],
            [comment]
        ) VALUES
        (
            @scheduled_benchmark_id,
            @worker_number,
            @benchmark_scaling_argument,
            @scaled_down,
            @region,
            @server_name,
            @database_name,
            @warmup_timespan_minutes,
            @run_timespan_minutes,
            @custom_master_tsql_query,
            @required_processor_count,
			@parallel_exec_cnt,
            @priority,
            @should_restore,
            NEWID(),
            @scheduled_by,
            @comment
         )

     COMMIT TRANSACTION
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[schedule_adhoc_benchmark_override]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ************************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: schedule_adhoc_benchmark_override.sql
--
-- @Owner: v-dukut
--
-- Purpose: Stored procedure used to schedule adhoc runs, with desired parameters set as override.
--			config overrides + instance, database and slo property bag overrides
--			If some argument is not specified default value is taken for that SLO
--			Behaves same as schedule_adhoc_benchmark procedure + job_id and config_override columns
--			(This isn't added in schedule_adhoc_benchmark procedure since only v-dukut uses it)
--
-- ************************************************************************

CREATE PROCEDURE [dbo].[schedule_adhoc_benchmark_override]
	@action_name NVARCHAR(64),
	@processor_count INT,
	@hardware_generation NVARCHAR(64),
	@environment NVARCHAR(64),
	@is_bc BIT,
	@should_restore BIT = 1,
	@priority INT = 0,
	@worker_number INT = NULL,
	@benchmark_scaling_argument INT = NULL,
	@scaled_down BIT = NULL,
	@region VARCHAR(100) = NULL,
	@server_name NVARCHAR(1000) = NULL,
	@database_name NVARCHAR(128) = NULL,
	@warmup_timespan_minutes INT = NULL,
	@run_timespan_minutes INT = NULL,
	@custom_master_tsql_query NVARCHAR(MAX) = NULL,
	@required_processor_count INT = NULL,
	@parallel_exec_cnt INT = NULL,
	@scheduled_by NVARCHAR(1024) = NULL,
	@comment NVARCHAR(MAX) = NULL,

	@job_id INT = NULL,

	@config_names NVARCHAR(MAX) NULL,
	@config_values NVARCHAR(MAX) NULL,
	@instance_settings_overrides NVARCHAR(MAX) NULL,
	@database_settings_overrides NVARCHAR(MAX) NULL,
	@slo_property_bag_overrides NVARCHAR(MAX) NULL,
	@trace_flags NVARCHAR(MAX) NULL,

	@scheduled_benchmark_id INT = NULL OUTPUT
AS
BEGIN
		-- Python library for connecting to database doesn't works properly if
		-- anything is displayed in the message
		SET NOCOUNT ON;  

		SELECT
		@worker_number = COALESCE(@worker_number, [worker_number]),
		@benchmark_scaling_argument = COALESCE(@benchmark_scaling_argument, [benchmark_scaling_argument]),
		@scaled_down = COALESCE(@scaled_down, [scaled_down]),
		@region = COALESCE(@region, [region]),
		@server_name = COALESCE(@server_name, [server_name]),
		@database_name = COALESCE(@database_name, [database_name]),
		@warmup_timespan_minutes = COALESCE(@warmup_timespan_minutes, [warmup_timespan_minutes]),
		@run_timespan_minutes = COALESCE(@run_timespan_minutes, [run_timespan_minutes]),
		@custom_master_tsql_query = COALESCE(@custom_master_tsql_query, [custom_master_tsql_query]),
		@required_processor_count = COALESCE(@required_processor_count, [required_processor_count]),
		@parallel_exec_cnt = COALESCE(@parallel_exec_cnt, [parallel_exec_cnt])
		FROM [slo_benchmark_config]
		WHERE [benchmark_name] = @action_name
		AND [environment] = @environment
		AND [processor_count] = @processor_count
		AND [hardware_generation] = @hardware_generation
		AND [is_bc] = @is_bc

		IF @scheduled_by IS NOT NULL
		SET @scheduled_by = CONCAT(@scheduled_by, '@microsoft.com')
		ELSE IF (CHARINDEX('@microsoft', SUSER_NAME()) > 0)
		SET @scheduled_by = SUSER_NAME()

		BEGIN TRANSACTION

		INSERT INTO [dbo].[scheduled_benchmarks]
			([is_adhoc_run], [processor_count], [parallel_exec_cnt], [hardware_generation], [is_bc], [benchmark_name], [environment], [is_picked_up], [job_id])
		VALUES
			(1, @processor_count, @parallel_exec_cnt, @hardware_generation, @is_bc, @action_name, @environment, 0, @job_id)

		SET @scheduled_benchmark_id = SCOPE_IDENTITY()

		INSERT INTO [dbo].[adhoc_run_configs]
		(
			[id],
			[worker_number],
			[benchmark_scaling_argument],
			[scaled_down],
			[region],
			[server_name],
			[database_name],
			[warmup_timespan_minutes],
			[run_timespan_minutes],
			[custom_master_tsql_query],
			[required_processor_count],
			[parallel_exec_cnt],
			[priority],
			[should_restore],
			[correlation_id],
			[scheduled_by],
			[comment]
		) VALUES
		(
			@scheduled_benchmark_id,
			@worker_number,
			@benchmark_scaling_argument,
			@scaled_down,
			@region,
			@server_name,
			@database_name,
			@warmup_timespan_minutes,
			@run_timespan_minutes,
			@custom_master_tsql_query,
			@required_processor_count,
			@parallel_exec_cnt,
			@priority,
			@should_restore,
			NEWID(),
			@scheduled_by,
			@comment
			)

		INSERT INTO [dbo].[config_override]
		(
		[id],
		[config_override],
		[config_names],
		[config_values],
		[instance_settings_overrides],
		[database_settings_overrides],
		[slo_property_bag_overrides],
		[trace_flags]

		) VALUES
		(
		@scheduled_benchmark_id,
		(SELECT @config_names AS ConfigNames, @config_values AS ConfigValues FOR JSON PATH),
		@config_names,
		@config_values,
		@instance_settings_overrides,
		@database_settings_overrides,
		@slo_property_bag_overrides,
		@trace_flags
		)

		DECLARE @config_action_parameters_json NVARCHAR(MAX),
				@property_action_parameters_json NVARCHAR(MAX)

		--action SetConfigOverride 
		SET @config_action_parameters_json = (SELECT config_names, config_values
											FROM config_override
											WHERE id = @scheduled_benchmark_id FOR JSON AUTO)

		EXEC add_action_to_scheduled_benchmark
			@scheduled_benchmark_id = @scheduled_benchmark_id,
			@action_type = 'SetConfigOverride',
			@required_benchmark_state = 'Setup',
			@offset_seconds = 0,
			@action_parameters_json = @config_action_parameters_json

		--action SetPropertyOverride	
		SET @property_action_parameters_json = (SELECT instance_settings_overrides, database_settings_overrides, slo_property_bag_overrides
										FROM config_override
										WHERE id = @scheduled_benchmark_id FOR JSON AUTO) 

		EXEC add_action_to_scheduled_benchmark
			@scheduled_benchmark_id = @scheduled_benchmark_id,
			@action_type = 'SetPropertyOverride',
			@required_benchmark_state = 'ConfigOverridesApplied',
			@offset_seconds = 0,
			@action_parameters_json = @property_action_parameters_json


		COMMIT TRANSACTION
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[start_benchmark]...';


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: start_benchmark.sql
--
-- @Owner: v-milast
--
-- Purpose:
-- This stored procedure is used to initialize benchmark for runs.
-- It returns run_id
--
-- *********************************************************************
CREATE PROCEDURE [dbo].[start_benchmark]
	@benchmark_name VARCHAR(128),
	@processor_count INT,
	@hardware_generation VARCHAR(128),
	@parallel_exec_cnt INT = NULL,
	@environment VARCHAR(128) = NULL,
	@instance_dns_name VARCHAR(1000) = NULL,
	@comment NVARCHAR(MAX) = NULL,
	@correlation_id UNIQUEIDENTIFIER = NULL,
	@is_bussiness_critical BIT = 0
AS
BEGIN
	DECLARE @instance_id INT

	SELECT
		@instance_id = [instance_id]
	FROM
		[instance_state]
	WHERE
		[instance_name] = @instance_dns_name

	INSERT INTO [benchmark_runs]
	(
		[start_time],
		[benchmark_name],
		[instance_id],
		[processor_count],
		[parallel_exec_cnt],
		[hardware_generation],
		[environment],
		[comment],
		[correlation_id],
		[is_bc],
		[mail_sent]
	)
	OUTPUT [inserted].[run_id]
	VALUES
	(
		GETUTCDATE(),
		@benchmark_name,
		@instance_id,
		@processor_count,
		@parallel_exec_cnt,
		@hardware_generation,
		@environment,
		@comment,
		@correlation_id,
		@is_bussiness_critical,
		0
	)
END
GO
PRINT N'Creating [dbo].[start_scheduled_benchmark]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: start_scheduled_benchmark.sql
--
-- @Owner: anjov
--
-- Purpose:
-- Starts a scheduled benchmark run, specified by its ID, on the given instance.
-- Also schedules any actions connected to the benchmark.
--
-- *********************************************************************
CREATE PROCEDURE [dbo].[start_scheduled_benchmark]
	@scheduled_benchmark_id INT,
	@instance_dns_name VARCHAR(1000),
	@comment NVARCHAR(MAX) = NULL,
	@correlation_id UNIQUEIDENTIFIER = NULL
AS
	DECLARE @benchmark_run_id INT
	DECLARE @instance_id INT

	SELECT
		@instance_id = [instance_id]
	FROM
		[instance_state]
	WHERE
		[instance_name] = @instance_dns_name

	INSERT INTO benchmark_runs
	(
		start_time,
		scheduled_benchmark_id,
		benchmark_name,
		instance_id,
		processor_count,
		parallel_exec_cnt,
		hardware_generation,
		environment,
		comment,
		correlation_id,
		is_bc
	)
	SELECT
		GETUTCDATE(),
		id,
		benchmark_name,
		@instance_id,
		processor_count,
		parallel_exec_cnt,
		hardware_generation,
		environment,
		@comment,
		@correlation_id,
		is_bc
	FROM
		scheduled_benchmarks
	WHERE
		id = @scheduled_benchmark_id

	SET @benchmark_run_id = SCOPE_IDENTITY()

	UPDATE benchmark_action_executions
	SET run_id = @benchmark_run_id
	WHERE action_id IN (
		SELECT action_id
		FROM scheduled_benchmark_actions
		WHERE scheduled_benchmark_id = @scheduled_benchmark_id)

	SELECT @benchmark_run_id AS [run_id]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[get_next_action]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: get_next_action.sql
--
-- @Owner: v-milast
--
-- Returns action to execute with parameters, based on available resources and environment
-- DEVNOTE: This SP is not thread safe for same environment provided as parameter
-- Different environments can operate at same time
-- It is not thread safe because it first READS and later on UPDATEs read values
--
-- *********************************************************************
CREATE PROCEDURE [dbo].[get_next_action]
    @available_cores INT,
    @environment NVARCHAR(64)
AS
BEGIN
    -- Python is getting confused if anything is displayed in messages
    SET NOCOUNT ON;

    DECLARE @benchmark_name NVARCHAR(128);
    DECLARE @processor_count INT = NULL;
    DECLARE @is_bc BIT = NULL;
    DECLARE @hardware_generation NVARCHAR(64) = NULL;
    DECLARE @worker_number INT = NULL;
    DECLARE @benchmark_scaling_argument INT = NULL;
    DECLARE @scaled_down BIT = NULL;
    DECLARE @server_name NVARCHAR(1000) = NULL;
    DECLARE @database_name NVARCHAR(128) = NULL;
    DECLARE @warmup_timespan_minutes INT = NULL;
    DECLARE @run_timespan_minutes INT = NULL;
    DECLARE @custom_master_tsql_query NVARCHAR(MAX) = NULL;
    DECLARE @required_processor_count INT = NULL;
	DECLARE @parallel_exec_cnt INT = NULL;
    DECLARE @id INT = NULL;
    DECLARE @scheduled_count INT = NULL;
    DECLARE @should_restore BIT;
    DECLARE @correlation_id UNIQUEIDENTIFIER;
    DECLARE @has_result BIT = 0;

    -- Auto rollback if exception happens
    SET XACT_ABORT ON

    -- DEVNOTE: We are blocking stage deployments with restore, so hard code to not work during update hours
    -- from 00:00AM to 11AM
    DECLARE @current_timestamp DATETIME2(0) = GETUTCDATE()
    DECLARE @stage_scheduled_runs_embargo BIT = 0
    IF ((@environment = 'Stage' OR @environment = 'SVMStage') AND DATEPART(HOUR, @current_timestamp) >= 0 AND DATEPART(HOUR, @current_timestamp) <= 11)
    BEGIN
        SET @stage_scheduled_runs_embargo = 1;
    END

    BEGIN TRANSACTION GET_NEXT_ACTION_TRAN
    -- Prioritizes ad hoc runs
    -- we cannot put instance_state in this query as we want scheduled with highest priority to be executed next, no matter whether instance is available or not
    SELECT TOP 1
        @id = [id],
        @benchmark_name = [benchmark_name],
        @processor_count = [processor_count],
        @is_bc = [is_bc],
        @hardware_generation = [hardware_generation],
        @worker_number = [worker_number],
        @benchmark_scaling_argument = [benchmark_scaling_argument],
        @scaled_down = [scaled_down],
        @server_name = [server_name],
        @database_name = [database_name],
        @warmup_timespan_minutes = [warmup_timespan_minutes],
        @run_timespan_minutes = [run_timespan_minutes],
        @custom_master_tsql_query = [custom_master_tsql_query],
        @required_processor_count = [required_processor_count],
		@parallel_exec_cnt = [parallel_exec_cnt],
        @should_restore = [should_restore],
        @correlation_id = [correlation_id]
    FROM [scheduled_benchmarks_view]
    WHERE 
        environment = @environment
        AND [is_adhoc_run] = 1
        AND [is_picked_up] = 0
        AND [server_name] NOT IN
        (
            SELECT [instance_name]
            FROM [occupied_instances_view]
        )
    ORDER BY [priority] DESC, [id] ASC

    -- if no ad hoc run scheduled get regular runs
    IF @server_name IS NULL
    BEGIN
        SELECT TOP 1
            @id = [id],
            @benchmark_name = [benchmark_name],
            @processor_count = [processor_count],
            @is_bc = [is_bc],
            @hardware_generation = [hardware_generation],
            @worker_number = [worker_number],
            @benchmark_scaling_argument = [benchmark_scaling_argument],
            @scaled_down = [scaled_down],
            @server_name = [server_name],
            @database_name = [database_name],
            @warmup_timespan_minutes = [warmup_timespan_minutes],
            @run_timespan_minutes = [run_timespan_minutes],
            @custom_master_tsql_query = [custom_master_tsql_query],
            @required_processor_count = [required_processor_count],
			@parallel_exec_cnt = [parallel_exec_cnt],
            @should_restore = 1,
            @correlation_id = NEWID()
        FROM [scheduled_benchmarks_view]
        WHERE [environment] = @environment
        AND [required_processor_count] <= @available_cores
        AND [server_name] NOT IN
        (
            SELECT [instance_name]
            FROM [occupied_instances_view]
        )
        AND [is_picked_up] = 0
		AND @stage_scheduled_runs_embargo = 0
        ORDER BY [required_processor_count] DESC, [id] ASC

        -- only update if we actually got some @server_name back
        IF (@server_name IS NOT NULL)
        BEGIN
            UPDATE [scheduled_benchmarks]
            SET [is_picked_up] = 1
            WHERE [id] = @id

            SET @has_result = 1;

            -- If all recurring benchmarks are already picked up, reset is_picked_up to 0, so we can start a new cycle.
            IF NOT EXISTS (
                SELECT 1 FROM [scheduled_benchmarks] 
                WHERE [environment] = @environment AND [is_adhoc_run] = 0 AND [is_picked_up] = 0
            )
            BEGIN
                UPDATE [scheduled_benchmarks]
                SET [is_picked_up] = 0
                WHERE [environment] = @environment AND [is_adhoc_run] = 0
            END
        END
    END
    ELSE
    BEGIN
        -- only update if there are enough resources to run and instance is available
        IF (@required_processor_count <= @available_cores)
        BEGIN
            UPDATE [scheduled_benchmarks]
            SET [is_picked_up] = 1
            WHERE [id] = @id

            SET @has_result = 1;
        END
    END

    -- return results only if there are enough resources
    IF @has_result = 1
    BEGIN
        -- upsert state of instance
        EXEC upsert_instance
            @instance_name = @server_name,
            @state = 'Occupied';

        SELECT
            @id as [scheduled_benchmark_id],
            @benchmark_name AS [benchmark_name],
            @processor_count AS [processor_count],
            @is_bc AS [is_bc],
            @hardware_generation AS [hardware_generation],
            @worker_number AS [worker_number],
            @benchmark_scaling_argument AS [benchmark_scaling_argument],
            @scaled_down AS [scaled_down],
            @server_name AS [server_name],
            @database_name AS [database_name],
            @warmup_timespan_minutes AS [warmup_timespan_minutes],
            @run_timespan_minutes AS [run_timespan_minutes],
            @custom_master_tsql_query AS [custom_master_tsql_query],
            @should_restore AS [should_restore],
            @required_processor_count AS [required_processor_count],
			@parallel_exec_cnt AS [parallel_exec_cnt],
            @correlation_id AS [correlation_id]
    END

    COMMIT TRANSACTION GET_NEXT_ACTION_TRAN
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[exec_and_verify_get_next_action]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: exec_and_verify_get_next_action.sql
--
-- @Owner: v-milast
--
-- Purpose:
-- Helper functions that executes and verifies results of get_next_action SP
--
-- *********************************************************************
CREATE PROCEDURE [dbo].[exec_and_verify_get_next_action]
    @available_resources INT,
    @expect_results BIT,
    @expected_action_name NVARCHAR(64) = NULL,
    @expected_processor_count INT = NULL,
    @expected_hardware_generation NVARCHAR(64) = NULL,
    @expected_is_bc BIT = NULL,
    @expected_should_restore BIT = NULL,
    @expected_worker_number INT = NULL,
    @expected_benchmark_scaling_argument INT = NULL,
    @expected_scaled_down BIT = NULL,
    @expected_server_name NVARCHAR(1000) = NULL,
    @expected_database_name NVARCHAR(128) = NULL,
    @expected_warmup_timespan_minutes INT = NULL,
    @expected_run_timespan_minutes INT = NULL,
    @expected_custom_master_tsql_query NVARCHAR(MAX) = NULL,
    @expected_required_processor_count INT = NULL
AS
BEGIN
    DECLARE @exception_message NVARCHAR(MAX);
    DECLARE @actual_action_name NVARCHAR(64) = NULL;
    DECLARE @actual_processor_count INT = NULL;
    DECLARE @actual_hardware_generation NVARCHAR(64) = NULL;
    DECLARE @actual_is_bc BIT = NULL;
    DECLARE @actual_should_restore BIT = NULL;
    DECLARE @actual_priority INT = NULL;
    DECLARE @actual_worker_number INT = NULL;
    DECLARE @actual_benchmark_scaling_argument INT = NULL;
    DECLARE @actual_scaled_down BIT = NULL;
    DECLARE @actual_server_name NVARCHAR(1000) = NULL;
    DECLARE @actual_database_name NVARCHAR(128) = NULL;
    DECLARE @actual_warmup_timespan_minutes INT = NULL;
    DECLARE @actual_run_timespan_minutes INT = NULL;
    DECLARE @actual_custom_master_tsql_query NVARCHAR(MAX) = NULL;
    DECLARE @actual_required_processor_count INT = NULL;

    DECLARE @tmptable AS TABLE
    (
        [scheduled_benchmark_id] INT,
        [benchmark_name] NVARCHAR(128),
        [processor_count] INT,
        [is_bc] BIT,
        [hardware_generation] NVARCHAR(64),
        [worker_number] INT,
        [benchmark_scaling_argument] INT,
        [scaled_down] BIT,
        [server_name] NVARCHAR(1000),
        [database_name] NVARCHAR(128),
        [warmup_timespan_minutes] INT,
        [run_timespan_minutes] INT,
        [custom_master_tsql_query] NVARCHAR(MAX),
        [should_restore] BIT,
        [required_processor_count] INT,
        [correlation_id] UNIQUEIDENTIFIER
    )

    INSERT INTO @tmptable
    EXEC get_next_action
        @available_cores = @available_resources,
        @environment = 'UnitTest'

    SELECT
         @actual_action_name = [benchmark_name],
         @actual_processor_count = [processor_count],
         @actual_is_bc = [is_bc],
         @actual_hardware_generation = [hardware_generation],
         @actual_worker_number = [worker_number],
         @actual_benchmark_scaling_argument = [benchmark_scaling_argument],
         @actual_scaled_down = [scaled_down],
         @actual_server_name = [server_name],
         @actual_database_name = [database_name],
         @actual_warmup_timespan_minutes = [warmup_timespan_minutes],
         @actual_run_timespan_minutes = [run_timespan_minutes],
         @actual_should_restore = [should_restore],
         @actual_custom_master_tsql_query = [custom_master_tsql_query],
         @actual_required_processor_count = [required_processor_count]
    FROM
        @tmptable

    IF @expect_results = 1
    BEGIN
        IF (@actual_action_name <> @expected_action_name OR
            @actual_processor_count <> @expected_processor_count OR
            @actual_hardware_generation <> @expected_hardware_generation OR
            @actual_is_bc <> @expected_is_bc OR
            @actual_should_restore <> @expected_should_restore OR
            @actual_worker_number <> @expected_worker_number OR
            @actual_benchmark_scaling_argument <> @expected_benchmark_scaling_argument OR
            @actual_scaled_down <> @expected_scaled_down OR
            @actual_server_name <> @expected_server_name OR
            @actual_database_name <> @expected_database_name OR
            @actual_warmup_timespan_minutes <> @expected_warmup_timespan_minutes OR
            @actual_run_timespan_minutes <> @expected_run_timespan_minutes OR
            @actual_required_processor_count <> @expected_required_processor_count OR
            COALESCE(@actual_custom_master_tsql_query, '') <> COALESCE(@expected_custom_master_tsql_query, ''))
        BEGIN
            SET @exception_message = CONCAT('Values dont match: (actual, expected) pairs: ',
                '(', @actual_action_name, ', ', @expected_action_name, '),',
                '(', @actual_processor_count, ', ', @expected_processor_count, '),',
                '(', @actual_hardware_generation, ', ', @expected_hardware_generation, '),',
                '(', @actual_is_bc, ', ', @expected_is_bc, '),',
                '(', @actual_should_restore, ', ', @expected_should_restore, '),',
                '(', @actual_worker_number, ', ', @expected_worker_number, '),',
                '(', @actual_benchmark_scaling_argument, ', ', @expected_benchmark_scaling_argument, '),',
                '(', @actual_scaled_down, ', ', @expected_scaled_down, '),',
                '(', @actual_server_name, ', ', @expected_server_name, '),',
                '(', @actual_database_name, ', ', @expected_database_name, '),',
                '(', @actual_warmup_timespan_minutes, ', ', @expected_warmup_timespan_minutes, '),',
                '(', @actual_run_timespan_minutes, ', ', @expected_run_timespan_minutes, '), ',
                '(', @actual_required_processor_count, ', ', @expected_required_processor_count, '), ',
                '(', @actual_custom_master_tsql_query, ', ', @expected_custom_master_tsql_query, ')');
            THROW 50001, @exception_message, 1
        END
    END
    ELSE
    BEGIN
        IF @actual_action_name IS NOT NULL
        BEGIN;
            SET @exception_message = CONCAT('Expected no values but got (',
                @actual_action_name, ', ',
                @actual_processor_count, ', ',
                @actual_hardware_generation, ', ',
                @actual_is_bc, ', ',
                @actual_should_restore, ', ',
                @actual_worker_number, ', ',
                @actual_benchmark_scaling_argument, ', ',
                @actual_scaled_down, ', ',
                @actual_server_name, ', ',
                @actual_database_name, ', ',
                @actual_warmup_timespan_minutes, ', ',
                @actual_run_timespan_minutes, ', ',
                @actual_required_processor_count, ')');

            THROW 50002, @exception_message, 1
        END
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[finalize_action]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: finalize_action.sql
--
-- @Owner: v-milast
--
-- Purpose:
-- This stored procedure is used to finalize actions on instance.
-- It returns run_id
--
-- *********************************************************************
CREATE PROCEDURE [dbo].[finalize_action]
    @server_name NVARCHAR(1000)
AS
BEGIN
    EXEC [upsert_instance]
        @instance_name = @server_name,
        @state = 'Ready'
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[schedule_job]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: schedule_job.sql
--
-- @Owner: v-dukut
--
-- Purpose: Stored procedure used to schedule job, with desired parameters set as override.
--			Two options for scheduling are possible:
--				1. schedule and define job with new name and desired configs and description
--				2. schedule job with existent name (applying configs from its definition)
--
--			Column configs store benchmark configurations in json format 
--			(see job_definitions table for more details)
--
--			Column description is human understandable job description 
--			If some argument is not specified default value is taken for that SLO
--
--
-- *********************************************************************

CREATE PROCEDURE [dbo].[schedule_job]
	@name NVARCHAR(MAX),
	@configs NVARCHAR(MAX) = NULL,
	@description NVARCHAR(MAX) = NULL,
	@id INT = NULL OUTPUT
AS
BEGIN
	-- Python library for connecting to database doesn't work properly if
	-- anything is displayed in the message
	SET NOCOUNT ON

	DECLARE @name_exists BIT = 0

	IF EXISTS
			(SELECT *
			FROM job_definitions
			WHERE [name] = @name) 

		SET @name_exists = 1

	IF @name_exists = 0 OR @configs IS NULL

		BEGIN
			
			IF @configs IS NULL
				SET @configs = (SELECT configs
								FROM job_definitions
								WHERE [name] =@name)

			INSERT INTO [dbo].[jobs]
				([name], [configs], [description])
			VALUES
				(@name, @configs, @description)

			SET @id = SCOPE_IDENTITY()

			--scheduling benchmarks region
			DECLARE cursor_job CURSOR FOR
				SELECT benchmark_name, processor_count, hardware_generation, environment, is_bc, should_restore, priority_,
						worker_number, benchmark_scaling_argument, scaled_down, region, server_name, database_name_, warmup_timespan_minutes,
						run_timespan_minutes, custom_master_tsql_query, required_processor_count, scheduled_by, comment, config_names,
						config_values, instance_settings_overrides, database_settings_overrides, slo_property_bag_overrides, trace_flags
				FROM parse_job(@id)
	
			DECLARE @action_name NVARCHAR(64),
					@processor_count INT,
					@hardware_generation NVARCHAR(64),
					@environment NVARCHAR(64),
					@is_bc BIT,
					@should_restore BIT,
					@priority INT,
					@worker_number INT,
					@benchmark_scaling_argument INT,
					@scaled_down BIT,
					@region VARCHAR(10),
					@server_name NVARCHAR(1000),
					@database_name NVARCHAR(128),
					@warmup_timespan_minutes INT,
					@run_timespan_minutes INT,
					@custom_master_tsql_query NVARCHAR(MAX),
					@required_processor_count INT,
					@scheduled_by NVARCHAR(1024),
					@comment NVARCHAR(MAX),
					@config_names NVARCHAR(MAX),
					@config_values NVARCHAR(MAX),
					@instance_settings_overrides NVARCHAR(MAX),
					@database_settings_overrides NVARCHAR(MAX),
					@slo_property_bag_overrides NVARCHAR(MAX),
					@trace_flags NVARCHAR(MAX),
					@scheduled_benchmark_id NVARCHAR(MAX)
					

			OPEN cursor_job
			FETCH NEXT FROM cursor_job 
			INTO @action_name, 
				@processor_count,
				@hardware_generation,
				@environment,
				@is_bc,
				@should_restore,
				@priority,
				@worker_number,
				@benchmark_scaling_argument,
				@scaled_down,
				@region,
				@server_name,
				@database_name,
				@warmup_timespan_minutes,
				@run_timespan_minutes,
				@custom_master_tsql_query,
				@required_processor_count,
				@scheduled_by,
				@comment,
				@config_names,
				@config_values,
				@instance_settings_overrides,
				@database_settings_overrides,
				@slo_property_bag_overrides,
				@trace_flags


			WHILE @@FETCH_STATUS = 0  
			BEGIN  
					EXEC schedule_adhoc_benchmark_override
						@action_name = @action_name,
						@processor_count = @processor_count ,
						@hardware_generation = @hardware_generation,
						@environment = @environment,
						@is_bc = @is_bc,
						@should_restore = @should_restore,
						@priority = @priority,
						@worker_number = @worker_number,
						@benchmark_scaling_argument = @benchmark_scaling_argument,
						@scaled_down = @scaled_down,
						@region = @region,
						@server_name = @server_name,
						@database_name = @database_name,
						@warmup_timespan_minutes = @warmup_timespan_minutes,
						@run_timespan_minutes = @run_timespan_minutes,
						@custom_master_tsql_query = @custom_master_tsql_query ,
						@required_processor_count = @required_processor_count,
						@scheduled_by = @scheduled_by,
						@comment = @comment,
						@config_names = @config_names,
						@config_values = @config_values,
						@instance_settings_overrides = @instance_settings_overrides,
						@database_settings_overrides = @database_settings_overrides,
						@slo_property_bag_overrides = @slo_property_bag_overrides,
						@trace_flags = @trace_flags,
						@job_id = @id,
						@scheduled_benchmark_id = @scheduled_benchmark_id OUTPUT
					

					FETCH NEXT FROM cursor_job
					INTO @action_name, 
						@processor_count,
						@hardware_generation,
						@environment,
						@is_bc,
						@should_restore,
						@priority,
						@worker_number,
						@benchmark_scaling_argument,
						@scaled_down,
						@region,
						@server_name,
						@database_name,
						@warmup_timespan_minutes,
						@run_timespan_minutes,
						@custom_master_tsql_query,
						@required_processor_count,
						@scheduled_by,
						@comment,
						@config_names,
						@config_values,
						@instance_settings_overrides,
						@database_settings_overrides,
						@slo_property_bag_overrides,
						@trace_flags
			END

			CLOSE cursor_job  
			DEALLOCATE cursor_job
		END

	-- defining new job	
	IF @name_exists = 0
			
		INSERT INTO [dbo].[job_definitions]
			([name], [configs], [description])
		VALUES
			(@name, @configs, @description)

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[test_benchmark_actions]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: test_benchmark_actions.sql
--
-- @Owner: anjov
--
-- Purpose:
-- Tests basic functionality for benchmark actions
--
-- *********************************************************************
CREATE PROCEDURE dbo.test_benchmark_actions
AS
BEGIN
    DECLARE @exception_message VARCHAR(500)

    -- Add some default configurations for UnitTest env
    INSERT INTO [slo_benchmark_config]
    (
        [processor_count],
        [hardware_generation],
        [is_bc],
        [benchmark_name],
        [worker_number],
        [benchmark_scaling_argument],
        [scaled_down],
        [server_name],
        [database_name],
        [warmup_timespan_minutes],
        [run_timespan_minutes],
        [environment],
        [custom_master_tsql_query],
        [required_processor_count]
    )
    VALUES
        (8, 'GEN4', 0, 'TPCC', 100, 4000, 0, 'unittestsvr', 'tpcc4000', 15, 120, 'UnitTest', 'SELECT TOP 1 1', 3)

    SET IDENTITY_INSERT [scheduled_benchmarks] ON

    -- Schedule runs
    INSERT INTO [scheduled_benchmarks]
    (
        [id],
        [processor_count],
        [hardware_generation],
        [is_bc],
        [benchmark_name],
        [environment],
        [is_picked_up],
        [is_adhoc_run]
    ) VALUES
        (1001, 8, 'GEN4', 0, 'TPCC', 'UnitTest', 0, 0)

    SET IDENTITY_INSERT [scheduled_benchmarks] OFF

    INSERT INTO instance_state
        (instance_environment, region, instance_name, [state])
    VALUES
        ('UnitTest', 'mockregion', 'unittestsvr', 'NotRunningBenchmark')

    INSERT INTO scheduled_benchmark_actions
        (scheduled_benchmark_id, action_type, required_benchmark_state, offset_seconds)
    VALUES
        (1001, 'Failover', 'RunningBenchmark', 0),
        (1001, 'MockAction', 'RunningBenchmark', 3600), -- action too far in the future
        (1001, 'MockAction', 'MockNonExistentState', 0) -- action in the wrong state

    EXEC start_scheduled_benchmark
        @scheduled_benchmark_id = 1001, @instance_dns_name = 'unittestsvr'

    DECLARE @action_execution_id BIGINT
    DECLARE @action VARCHAR(100)
    DECLARE @maximum_time_utc DATETIME2(0) = DATEADD(MINUTE, 30, GETUTCDATE())
    DECLARE @target_time_utc DATETIME2(0)

    SELECT @action = action_type FROM get_pending_benchmark_actions('UnitTest', 'mockregion', @target_time_utc)

    IF (@action IS NOT NULL)
    BEGIN
        SET @exception_message = CONCAT('Unexpected action: ', @action);
        THROW 50001, @exception_message, 1
    END

    EXEC upsert_instance
        @instance_name = 'unittestsvr', @state = 'RunningBenchmark'

    -- Make sure the target action time has arrived
    WAITFOR DELAY '00:00:01'

    SELECT @action_execution_id = action_execution_id, @action = action_type, @target_time_utc = target_time_utc
    FROM get_pending_benchmark_actions('UnitTest', 'mockregion', @maximum_time_utc)

    IF (NOT(@action = 'Failover' AND @target_time_utc < GETUTCDATE()))
    BEGIN
        SET @exception_message = CONCAT('Expected action not found. Actual: ', @action, ' at ', @target_time_utc);
        THROW 50001, @exception_message, 2
    END

    -- Simulate action execution
    UPDATE dbo.benchmark_action_executions
    SET executed_time_utc = GETUTCDATE()
    WHERE action_execution_id = @action_execution_id

    -- The other two actions still shouldn't be shown
    SET @action = NULL
    SELECT @action = action_type FROM get_pending_benchmark_actions('UnitTest', 'mockregion', @maximum_time_utc)

    IF (@action IS NOT NULL)
    BEGIN
        SET @exception_message = CONCAT('Unexpected action: ', @action);
        THROW 50001, @exception_message, 3
    END

    EXEC test_cleanup;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[test_get_next_action]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: test_get_next_action.sql
--
-- @Owner: v-milast
--
-- Purpose:
-- Test for get_next_action SP
--
-- *********************************************************************
CREATE PROCEDURE [dbo].[test_get_next_action]
AS
BEGIN
    BEGIN TRY
        DECLARE @expected_action_name NVARCHAR(64);
        DECLARE @expected_processor_count INT;
        DECLARE @expected_hardware_generation NVARCHAR(64);
        DECLARE @expected_environment NVARCHAR(64);
        DECLARE @expected_is_bc BIT;
        DECLARE @expected_should_restore BIT = 1;
        DECLARE @expected_priority INT = 0;
        DECLARE @expected_worker_number INT = NULL;
        DECLARE @expected_benchmark_scaling_argument INT = NULL;
        DECLARE @expected_scaled_down BIT = NULL;
        DECLARE @expected_server_name NVARCHAR = NULL;
        DECLARE @expected_database_name NVARCHAR = NULL;
        DECLARE @expected_warmup_timespan_minutes INT = NULL;
        DECLARE @expected_run_timespan_minutes INT = NULL;

        -- Initialize test environment
        -- Add some default configurations for UnitTest env
        INSERT INTO [slo_benchmark_config]
        (
            [processor_count],
            [hardware_generation],
            [is_bc],
            [benchmark_name],
            [worker_number],
            [benchmark_scaling_argument],
            [scaled_down],
            [server_name],
            [database_name],
            [warmup_timespan_minutes],
            [run_timespan_minutes],
            [environment],
            [custom_master_tsql_query],
            [required_processor_count]
        )
        VALUES
            (8, 'GEN4', 0, 'TPCC', 100, 4000, 0, 'unittestsvr1', 'tpcc4000', 15, 120, 'UnitTest', 'SELECT TOP 100 * FROM BLABLA', 3),
            (8, 'GEN4', 1, 'CDB', 100, 15000, 0, 'unittestsvr1', 'cdb15000', 15, 60, 'UnitTest', NULL, 4),
            (16, 'GEN4', 1, 'CDB', 200, 15000, 0, 'unittestsvr2', 'cdb15000', 15, 60, 'UnitTest', NULL, 8)

        SET IDENTITY_INSERT [scheduled_benchmarks] ON

        -- Schedule runs
        INSERT INTO [scheduled_benchmarks]
        (
            [id],
            [processor_count],
            [hardware_generation],
            [is_bc],
            [benchmark_name],
            [environment],
            [is_picked_up],
            [is_adhoc_run]
        ) VALUES
            (1001, 8, 'GEN4', 0, 'TPCC', 'UnitTest', 0, 0),
            (1002, 8, 'GEN4', 1, 'CDB',  'UnitTest', 0, 0),
            (1003, 16, 'GEN4', 1, 'CDB', 'UnitTest', 0, 0),
            (1004, 8, 'GEN4', 0, 'TPCC', 'UnitTest', 0, 0)

        SET IDENTITY_INSERT [scheduled_benchmarks] OFF

        INSERT INTO instance_state
            (instance_environment, region, instance_name, [state])
        VALUES
            ('UnitTest', 'mockregion', 'unittestsvr1', 'Ready'),
            ('UnitTest', 'mockregion', 'unittestsvr2', 'Ready'),
            ('UnitTest', 'mockregion', 'unittestsvr3', 'Ready')



        -- Test when no resources available no results are returned
        EXEC [exec_and_verify_get_next_action]
             @available_resources = 0,
             @expect_results = 0;

        -- we first expect scheduled run with id 1003 as it requires the most resources
        EXEC [exec_and_verify_get_next_action]
            @available_resources = 1000,
            @expect_results = 1,
            @expected_action_name = 'CDB',
            @expected_processor_count = 16,
            @expected_hardware_generation = 'GEN4',
            @expected_is_bc = 1,
            @expected_should_restore = 1,
            @expected_worker_number = 200,
            @expected_benchmark_scaling_argument = 15000,
            @expected_scaled_down = 0,
            @expected_server_name = 'unittestsvr2',
            @expected_database_name = 'cdb15000',
            @expected_warmup_timespan_minutes = 15,
            @expected_run_timespan_minutes = 60,
            @expected_required_processor_count = 8

        -- we now expect run with id 1002
        EXEC [exec_and_verify_get_next_action]
            @available_resources = 1000,
            @expect_results = 1,
            @expected_action_name = 'CDB',
            @expected_processor_count = 8,
            @expected_hardware_generation = 'GEN4',
            @expected_is_bc = 1,
            @expected_should_restore = 1,
            @expected_worker_number = 100,
            @expected_benchmark_scaling_argument = 15000,
            @expected_scaled_down = 0,
            @expected_server_name = 'unittestsvr1',
            @expected_database_name = 'cdb15000',
            @expected_warmup_timespan_minutes = 15,
            @expected_run_timespan_minutes = 60,
            @expected_required_processor_count = 4

        -- There can be no more runs as all instances are occupied now
        EXEC [exec_and_verify_get_next_action]
            @available_resources = 1000,
            @expect_results = 0

        -- lets free resource (instance) that is associated with scheduled id 1001, so we can test if adhoc runs have priority
        EXEC [finalize_action]
             @server_name = 'unittestsvr1'
        EXEC [finalize_action]
             @server_name = 'unittestsvr2'

        -- lets now schedule adhoc runs
        -- one with default and lower priority
        EXEC [schedule_adhoc_benchmark]
            @action_name = 'CDB',
            @processor_count = 16,
            @hardware_generation = 'GEN4',
            @environment = 'UnitTest',
            @is_bc = 1,
            @should_restore = 1,
            @priority = 0,
            @worker_number = 1000,
            @benchmark_scaling_argument = 32,
            @scaled_down = 1,
            @server_name = 'unittestsvr3',
            @database_name = 'cdbdb',
            @warmup_timespan_minutes = 15,
            @run_timespan_minutes = 111,
            @custom_master_tsql_query = 'TestQuery1',
            @required_processor_count = 4

        -- schedule another on same server with higher priority
        EXEC [schedule_adhoc_benchmark]
            @action_name = 'TPCC',
            @processor_count = 8,
            @hardware_generation = 'GEN4',
            @environment = 'UnitTest',
            @is_bc = 0,
            @should_restore = 0,
            @priority = 1,
            @worker_number = 2000,
            @benchmark_scaling_argument = 32,
            @scaled_down = 1,
            @server_name = 'unittestsvr3',
            @database_name = 'tpccdb',
            @warmup_timespan_minutes = 15,
            @run_timespan_minutes = 111,
            @custom_master_tsql_query = 'TestQuery2',
            @required_processor_count = 4

        -- we now expect adhoc run with highest priority
        EXEC [exec_and_verify_get_next_action]
            @available_resources = 1000,
            @expect_results = 1,
            @expected_action_name = 'TPCC',
            @expected_processor_count = 8,
            @expected_hardware_generation = 'GEN4',
            @expected_is_bc = 0,
            @expected_should_restore = 0,
            @expected_worker_number = 2000,
            @expected_benchmark_scaling_argument = 32,
            @expected_scaled_down = 1,
            @expected_server_name = 'unittestsvr3',
            @expected_database_name = 'tpccdb',
            @expected_warmup_timespan_minutes = 15,
            @expected_run_timespan_minutes = 111,
            @expected_custom_master_tsql_query = 'TestQuery2',
            @expected_required_processor_count = 4

        -- since there is something scheduled on unittestsvr3, next adhoc run should not block regular scheduled runs
       -- We now expect run with id 1001
        EXEC [exec_and_verify_get_next_action]
            @available_resources = 1000,
            @expect_results = 1,
            @expected_action_name = 'TPCC',
            @expected_processor_count = 8,
            @expected_hardware_generation = 'GEN4',
            @expected_is_bc = 0,
            @expected_should_restore = 1,
            @expected_worker_number = 100,
            @expected_benchmark_scaling_argument = 4000,
            @expected_scaled_down = 0,
            @expected_server_name = 'unittestsvr1',
            @expected_database_name = 'tpcc4000',
            @expected_warmup_timespan_minutes = 15,
            @expected_run_timespan_minutes = 120,
            @expected_custom_master_tsql_query = 'SELECT TOP 100 * FROM BLABLA',
            @expected_required_processor_count = 3

        -- Nothing else can be executed - as next regular run is scheduled on occupied instance
        -- and next adhoc run is also on occupied instance
        EXEC [exec_and_verify_get_next_action]
            @available_resources = 1000,
            @expect_results = 0

        -- lets unblock both regular and adhoc instances
        EXEC [finalize_action]
             @server_name = 'unittestsvr3'
        EXEC [finalize_action]
             @server_name = 'unittestsvr1'

        -- test the case when we have enough resources for regular run but there is adhoc scheduled
        EXEC [exec_and_verify_get_next_action]
            @available_resources = 3, -- 3 is what unittestsvr1 needs, 4 is what unittestsvr3 needs
            @expect_results = 0

        -- we now expect adhoc run we scheduled first - with lower priority
        EXEC [exec_and_verify_get_next_action]
            @available_resources = 4,
            @expect_results = 1,
            @expected_action_name = 'CDB',
            @expected_processor_count = 16,
            @expected_hardware_generation = 'GEN4',
            @expected_is_bc = 1,
            @expected_should_restore = 1,
            @expected_worker_number = 1000,
            @expected_benchmark_scaling_argument = 32,
            @expected_scaled_down = 1,
            @expected_server_name = 'unittestsvr3',
            @expected_database_name = 'cdbdb',
            @expected_warmup_timespan_minutes = 15,
            @expected_run_timespan_minutes = 111,
            @expected_custom_master_tsql_query = 'TestQuery1',
            @expected_required_processor_count = 4

       -- Finally we exepect scheduled run with id 1004 as it is the only one left
        EXEC [exec_and_verify_get_next_action]
            @available_resources = 1000,
            @expect_results = 1,
            @expected_action_name = 'TPCC',
            @expected_processor_count = 8,
            @expected_hardware_generation = 'GEN4',
            @expected_is_bc = 0,
            @expected_should_restore = 1,
            @expected_worker_number = 100,
            @expected_benchmark_scaling_argument = 4000,
            @expected_scaled_down = 0,
            @expected_server_name = 'unittestsvr1',
            @expected_database_name = 'tpcc4000',
            @expected_warmup_timespan_minutes = 15,
            @expected_run_timespan_minutes = 120,
            @expected_custom_master_tsql_query = 'SELECT TOP 100 * FROM BLABLA',
            @expected_required_processor_count = 3

        -- all scheduled runs are now executed once, we expect is_picked_up to be reset to 0 for UnitTest env
        IF EXISTS (SELECT 1 FROM [scheduled_benchmarks] 
            WHERE [is_adhoc_run] = 0 AND [is_picked_up] = 1 AND [environment] = 'UnitTest')
        BEGIN;
            THROW 50002, 'Expecting is_picked_up to be set to 0 for UnitTest env', 1
        END

        EXEC [test_cleanup];
    END TRY
    BEGIN CATCH
        EXEC [test_cleanup];
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[run_tests]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: run_tests.sql
--
-- @Owner: v-milast
--
-- Purpose:
-- Runs all tests
--
-- *********************************************************************
CREATE PROCEDURE [dbo].[run_tests]
AS
BEGIN
    BEGIN TRY
        EXEC test_cleanup;

        EXEC test_get_next_action;
        EXEC test_benchmark_actions;

        EXEC test_cleanup;
    END TRY
    BEGIN CATCH
        EXEC test_cleanup;
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/


-- We can only set one file to be post deploy script
-- so we call other scripts here
--

-- Insert data to slo benchmark config
SET XACT_ABORT ON

BEGIN TRANSACTION INIT_SLO_BENCH

DECLARE @slo_benchmark_config_tmp TABLE
(
    [processor_count] INT NOT NULL,
    [hardware_generation] NVARCHAR(128) NOT NULL,
    [is_bc] BIT NOT NULL,
    [benchmark_name] NVARCHAR(128) NOT NULL,
    [worker_number] INT NOT NULL,
    [benchmark_scaling_argument] INT NOT NULL,
    [scaled_down] BIT NOT NULL,
    [server_name] NVARCHAR(1000) NOT NULL,
    [database_name] NVARCHAR(128) NOT NULL,
    [warmup_timespan_minutes] INT NOT NULL,
    [run_timespan_minutes] INT NOT NULL,
    [custom_master_tsql_query] NVARCHAR(MAX) NULL,
    [required_processor_count] INT NOT NULL,
    [environment] NVARCHAR(50) NOT NULL
)

INSERT INTO @slo_benchmark_config_tmp
(
        [processor_count],
        [hardware_generation],
        [is_bc],
        [benchmark_name],
        [worker_number],
        [benchmark_scaling_argument],
        [scaled_down],
        [server_name],
        [database_name],
        [warmup_timespan_minutes],
        [run_timespan_minutes],
        [environment],
        [custom_master_tsql_query],
        [required_processor_count]
)
VALUES
        -- GEN 4 PROD
        (8, 'GEN4', 0, 'CDB', 1120, 15000, 0, 'clperftestin02.wcus10d832431fca2.database.windows.net', 'cdb15000', 15, 60, 'ProdG4', NULL, 2),
        (16, 'GEN4', 0, 'CDB', 1600, 15000, 0, 'clperftesting01.wcus10d832431fca2.database.windows.net', 'cdb15000', 15, 60, 'ProdG4', NULL, 3),
        (24, 'GEN4', 0, 'CDB', 1600, 30000, 0, 'clperftesting03.wcus10d832431fca2.database.windows.net', 'cdb30000', 15, 60, 'ProdG4', NULL, 4),
        (8, 'GEN4', 1, 'CDB', 1120, 15000, 0, 'clperftesting-gen4-bc8-wcus-01.wcus10d832431fca2.database.windows.net', 'cdb15000', 15, 60, 'ProdG4', NULL, 2),
        (16, 'GEN4', 1, 'CDB', 2240, 15000, 0, 'clperftesting-gen4-bc16-wcus-01.wcus10d832431fca2.database.windows.net', 'cdb15000', 15, 60, 'ProdG4', NULL, 3),
        (24, 'GEN4', 1, 'CDB', 3360, 30000, 0, 'clperftesting-gen4-bc24-wcus-01.wcus10d832431fca2.database.windows.net', 'cdb30000', 15, 60, 'ProdG4', NULL, 4),
        (8, 'GEN4', 0, 'TPCC', 100, 4000, 0, 'clperftestin02.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 2),
        (16, 'GEN4', 0, 'TPCC', 200, 4000, 0, 'clperftesting01.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 3),
        (24, 'GEN4', 0, 'TPCC', 300, 4000, 0, 'clperftesting03.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 4),
        (8, 'GEN4', 1, 'TPCC', 100, 4000, 0, 'clperftesting-gen4-bc8-wcus-01.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 2),
        (16, 'GEN4', 1, 'TPCC', 200, 4000, 0, 'clperftesting-gen4-bc16-wcus-01.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 3),
        (24, 'GEN4', 1, 'TPCC', 300, 4000, 0, 'clperftesting-gen4-bc24-wcus-01.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 4),
        -- GEN 5 PROD
        (8, 'GEN5', 0, 'CDB', 720, 15000, 0, 'clperftesting-gen5-gp8-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 60, 'ProdG5', NULL, 2),
        (16, 'GEN5', 0, 'CDB', 1440, 15000, 0, 'clperftesting-gen5-gp16-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 60, 'ProdG5', NULL, 3),
        (24, 'GEN5', 0, 'CDB', 1600, 15000, 0, 'clperftesting-gen5-gp24-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 60, 'ProdG5', NULL, 4),
        (32, 'GEN5', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp32-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 60, 'ProdG5', NULL, 5),
        (40, 'GEN5', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp40-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 60, 'ProdG5', NULL, 6),
        (64, 'GEN5', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp64-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 60, 'ProdG5', NULL, 7),
        (80, 'GEN5', 0, 'CDB', 1600, 40000, 0, 'clperftesting-gen5-gp80-weu-01.weu14c689be44714.database.windows.net', 'cdb40000', 30, 60, 'ProdG5', NULL, 8),
        (8, 'GEN5', 1, 'CDB', 720, 15000, 0, 'clperftesting-gen5-bc8-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 60, 'ProdG5', NULL, 2),
        (16, 'GEN5', 1, 'CDB', 1440, 15000, 0, 'clperftesting-gen5-bc16-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 60, 'ProdG5', NULL, 3),
        (24, 'GEN5', 1, 'CDB', 2160, 30000, 0, 'clperftesting-gen5-bc24-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 60, 'ProdG5', NULL, 4),
        (32, 'GEN5', 1, 'CDB', 2880, 30000, 0, 'clperftesting-gen5-bc32-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 60, 'ProdG5', NULL, 5),
        (40, 'GEN5', 1, 'CDB', 3600, 30000, 0, 'clperftesting-gen5-bc40-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 60, 'ProdG5', NULL, 6),
        (64, 'GEN5', 1, 'CDB', 5765, 30000, 0, 'clperftesting-gen5-bc64-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 60, 'ProdG5', NULL, 7),
        (80, 'GEN5', 1, 'CDB', 7200, 40000, 0, 'clperftesting-gen5-bc80-weu-01.weu14c689be44714.database.windows.net', 'cdb40000', 30, 60, 'ProdG5', NULL, 8),
        (8, 'GEN5', 0, 'TPCC', 100, 4000, 0, 'clperftesting-gen5-gp8-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 2),
        (16, 'GEN5', 0, 'TPCC', 200, 4000, 0, 'clperftesting-gen5-gp16-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 3),
        (24, 'GEN5', 0, 'TPCC', 300, 4000, 0, 'clperftesting-gen5-gp24-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 4),
        (32, 'GEN5', 0, 'TPCC', 400, 4000, 0, 'clperftesting-gen5-gp32-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 5),
        (40, 'GEN5', 0, 'TPCC', 500, 4000, 0, 'clperftesting-gen5-gp40-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 6),
        (64, 'GEN5', 0, 'TPCC', 800, 4000, 0, 'clperftesting-gen5-gp64-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 7),
        (80, 'GEN5', 0, 'TPCC', 1000, 4000, 0, 'clperftesting-gen5-gp80-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 8),
        (8, 'GEN5', 1, 'TPCC', 100, 4000, 0, 'clperftesting-gen5-bc8-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 2),
        (16, 'GEN5', 1, 'TPCC', 200, 4000, 0, 'clperftesting-gen5-bc16-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 3),
        (24, 'GEN5', 1, 'TPCC', 300, 4000, 0, 'clperftesting-gen5-bc24-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 4),
        (32, 'GEN5', 1, 'TPCC', 400, 4000, 0, 'clperftesting-gen5-bc32-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 5),
        (40, 'GEN5', 1, 'TPCC', 500, 4000, 0, 'clperftesting-gen5-bc40-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 6),
        (64, 'GEN5', 1, 'TPCC', 800, 4000, 0, 'clperftesting-gen5-bc64-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 7),
        (80, 'GEN5', 1, 'TPCC', 1000, 4000, 0, 'clperftesting-gen5-bc80-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 8),
        (8, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp8-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 99999, 'ProdG5', NULL, 4),
        (16, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp16-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 99999, 'ProdG5', NULL, 4),
        (24, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp24-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (32, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp32-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (40, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp40-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 99999, 'ProdG5', NULL, 4),
        (64, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp64-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 99999, 'ProdG5', NULL, 4),
        (80, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp80-weu-01.weu14c689be44714.database.windows.net', 'cdb40000', 30, 99999, 'ProdG5', NULL, 4),
        (8, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc8-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 99999, 'ProdG5', NULL, 4),
        (16, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc16-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 99999, 'ProdG5', NULL, 4),
        (24, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc24-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (32, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc32-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (40, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc40-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (64, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc64-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (80, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc80-weu-01.weu14c689be44714.database.windows.net', 'cdb40000', 15, 99999, 'ProdG5', NULL, 4),
        -- GEN 4 STAGE
        (8, 'GEN4', 0, 'CDB', 1120, 15000, 0, 'clperftesting-gen4-gp8-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'Stage', NULL, 2),
        (16, 'GEN4', 0, 'CDB', 1600, 15000, 0, 'clperftesting-gen4-gp16-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'Stage', NULL, 3),
        (24, 'GEN4', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen4-gp24-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'Stage', NULL, 3),
        (8, 'GEN4', 1, 'CDB', 1120, 15000, 0, 'clperftesting-gen4-bc8-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'Stage', NULL, 2),
        (16, 'GEN4', 1, 'CDB', 2240, 15000, 0, 'clperftesting-gen4-bc16-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'Stage', NULL, 3),
        (24, 'GEN4', 1, 'CDB', 3360, 30000, 0, 'clperftesting-gen4-bc24-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'Stage', NULL, 4),
        (8, 'GEN4', 0, 'TPCC', 100, 4000, 0, 'clperftesting-gen4-gp8-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 2),
        (16, 'GEN4', 0, 'TPCC', 200, 4000, 0, 'clperftesting-gen4-gp16-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 3),
        (24, 'GEN4', 0, 'TPCC', 300, 4000, 0, 'clperftesting-gen4-gp24-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 4),
        (8, 'GEN4', 1, 'TPCC', 100, 4000, 0, 'clperftesting-gen4-bc8-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 2),
        (16, 'GEN4', 1, 'TPCC', 200, 4000, 0, 'clperftesting-gen4-bc16-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 3),
        (24, 'GEN4', 1, 'TPCC', 300, 4000, 0, 'clperftesting-gen4-bc24-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 4),
        -- SVM Stage
        -- Loose
        (4, 'SVMLoose', 1, 'CDB', 360, 15000, 0, 'clperftesting-gen5-bc4-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 1),
        (4, 'SVMLoose', 1, 'CDB', 360, 15000, 0, 'clperftesting-gen5-gp4-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMProd', NULL, 1),
        (8, 'SVMLoose', 1, 'CDB', 720, 15000, 0, 'clperftesting-gen5-bc8-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 2),
        (24, 'SVMLoose', 1, 'CDB', 2160, 30000, 0, 'clperftesting-gen5-bc24-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'SVMStage', NULL, 4),
        (40, 'SVMLoose', 1, 'CDB', 3600, 30000, 0, 'clperftesting-gen5-bc40-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 30, 60, 'SVMStage', NULL, 24),
        (4, 'SVMLoose', 1, 'TPCC', 50, 4000, 0, 'clperftesting-gen5-bc4-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 1),
        (8, 'SVMLoose', 1, 'TPCC', 100, 4000, 0, 'clperftesting-gen5-bc8-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 2),
        (24, 'SVMLoose', 1, 'TPCC', 300, 4000, 0, 'clperftesting-gen5-bc24-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 4),
        (40, 'SVMLoose', 1, 'TPCC', 500, 4000, 0, 'clperftesting-gen5-bc40-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 30, 120, 'SVMStage', NULL, 24),
        -- Tight
        (4, 'SVMTight', 0, 'CDB', 360, 15000, 0, 'clperftesting-gen5-gp4-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 1),
        (8, 'SVMTight', 0, 'CDB', 720, 15000, 0, 'clperftesting-gen5-gp8-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 2),
        (16, 'SVMTight', 0, 'CDB', 1440, 15000, 0, 'clperftesting-gen5-gp16-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 3),
        (24, 'SVMTight', 0, 'CDB', 1600, 15000, 0, 'clperftesting-gen5-gp24-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'SVMStage', NULL, 4),
        (32, 'SVMTight', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp32-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'SVMStage', NULL, 5),
        (40, 'SVMTight', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp40-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 30, 60, 'SVMStage', NULL, 6),
        (64, 'SVMTight', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp64-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 30, 60, 'SVMStage', NULL, 7),
        (80, 'SVMTight', 0, 'CDB', 1600, 40000, 0, 'clperftesting-gen5-gp80-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb40000', 30, 60, 'SVMStage', NULL, 8),
        (4, 'SVMTight', 1, 'CDB', 360, 15000, 0, 'clperftesting-gen5-bc4-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 1),
        (8, 'SVMTight', 1, 'CDB', 720, 15000, 0, 'clperftesting-gen5-bc8-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 2),
        (24, 'SVMTight', 1, 'CDB', 2160, 30000, 0, 'clperftesting-gen5-bc24-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'SVMStage', NULL, 4),
        (40, 'SVMTight', 1, 'CDB', 3600, 30000, 0, 'clperftesting-gen5-bc40-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 30, 60, 'SVMStage', NULL, 24),
        (4, 'SVMTight', 0, 'TPCC', 50, 4000, 0, 'clperftesting-gen5-gp4-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 1),
        (8, 'SVMTight', 0, 'TPCC', 100, 4000, 0, 'clperftesting-gen5-gp8-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 2),
        (16, 'SVMTight', 0, 'TPCC', 200, 4000, 0, 'clperftesting-gen5-gp16-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 3),
        (24, 'SVMTight', 0, 'TPCC', 300, 4000, 0, 'clperftesting-gen5-gp24-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 4),
        (32, 'SVMTight', 0, 'TPCC', 400, 4000, 0, 'clperftesting-gen5-gp32-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 5),
        (40, 'SVMTight', 0, 'TPCC', 500, 4000, 0, 'clperftesting-gen5-gp40-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 30, 120, 'SVMStage', NULL, 6),
        (64, 'SVMTight', 0, 'TPCC', 800, 4000, 0, 'clperftesting-gen5-gp64-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 30, 120, 'SVMStage', NULL, 7),
        (4, 'SVMTight', 1, 'TPCC', 50, 4000, 0, 'clperftesting-gen5-bc4-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 1),
        (8, 'SVMTight', 1, 'TPCC', 100, 4000, 0, 'clperftesting-gen5-bc8-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 2),
        (24, 'SVMTight', 1, 'TPCC', 300, 4000, 0, 'clperftesting-gen5-bc24-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 4),
        (40, 'SVMTight', 1, 'TPCC', 500, 4000, 0, 'clperftesting-gen5-bc40-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 30, 120, 'SVMStage', NULL, 24)

MERGE [slo_benchmark_config] AS target
USING @slo_benchmark_config_tmp AS source
ON (target.[processor_count] = source.[processor_count]
    AND target.[hardware_generation] = source.[hardware_generation]
    AND target.[is_bc] = source.[is_bc]
    AND target.[benchmark_name] = source.[benchmark_name]
    AND target.[environment] = source.[environment])
        WHEN MATCHED THEN
        UPDATE SET
                [worker_number] = [source].[worker_number],
                [benchmark_scaling_argument] = [source].[benchmark_scaling_argument],
                [scaled_down] = [source].[scaled_down],
                [server_name] = [source].[server_name],
                [database_name] = [source].[database_name],
                [warmup_timespan_minutes] = [source].[warmup_timespan_minutes],
                [run_timespan_minutes] = [source].[run_timespan_minutes],
                [custom_master_tsql_query] = [source].[custom_master_tsql_query],
                [required_processor_count] = [source].[required_processor_count]
        WHEN NOT MATCHED THEN
        INSERT
        (
                [processor_count],
                [hardware_generation],
                [is_bc],
                [benchmark_name],
                [worker_number],
                [benchmark_scaling_argument],
                [scaled_down],
                [server_name],
                [database_name],
                [warmup_timespan_minutes],
                [run_timespan_minutes],
                [custom_master_tsql_query],
                [required_processor_count],
                [environment]
        ) VALUES
        (
                [source].[processor_count],
                [source].[hardware_generation],
                [source].[is_bc],
                [source].[benchmark_name],
                [source].[worker_number],
                [source].[benchmark_scaling_argument],
                [source].[scaled_down],
                [source].[server_name],
                [source].[database_name],
                [source].[warmup_timespan_minutes],
                [source].[run_timespan_minutes],
                [source].[custom_master_tsql_query],
                [source].[required_processor_count],
                [source].[environment]
        );
COMMIT TRANSACTION INIT_SLO_BENCH


-- Insert data for scheduled benchmarks
SET XACT_ABORT ON

BEGIN TRANSACTION INIT_SLO_BENCH

DECLARE @scheduled_benchmarks_tmp TABLE
(
    [processor_count] INT NOT NULL,
    [hardware_generation] NVARCHAR(128) NOT NULL,
    [is_bc] BIT NOT NULL,
    [benchmark_name] NVARCHAR(128) NOT NULL,
    [environment]  NVARCHAR(50) NOT NULL,
    [is_picked_up] BIT NOT NULL
)

INSERT INTO @scheduled_benchmarks_tmp
(
    [processor_count],
    [hardware_generation],
    [is_bc],
    [benchmark_name],
    [environment],
    [is_picked_up]
)
VALUES
        (8, 'Gen4', 1 , 'CDB', 'ProdG4', 0),
        (16, 'Gen4', 1 , 'CDB', 'ProdG4', 0),
        (24, 'Gen4', 1 , 'CDB', 'ProdG4', 0),
        (8, 'Gen4', 0 , 'CDB', 'ProdG4', 0),
        (16, 'Gen4', 0 , 'CDB', 'ProdG4', 0),
        (24, 'Gen4', 0 , 'CDB', 'ProdG4', 0),
        (8, 'Gen4', 1 , 'TPCC', 'ProdG4', 0),
        (16, 'Gen4', 1 , 'TPCC', 'ProdG4', 0),
        (24, 'Gen4', 1 , 'TPCC', 'ProdG4', 0),
        (8, 'Gen4', 0 , 'TPCC', 'ProdG4', 0),
        (16, 'Gen4', 0 , 'TPCC', 'ProdG4', 0),
        (24, 'Gen4', 0 , 'TPCC', 'ProdG4', 0),
        (8, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (16, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (24, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (32, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (40, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (64, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (80, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (8, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (16, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (24, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (32, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (40, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (64, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (80, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (8, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (16, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (24, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (32, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (40, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (64, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (80, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (8, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (16, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (24, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (32, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (40, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (64, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (80, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (8, 'Gen4', 1 , 'CDB', 'Stage', 0),
        (16, 'Gen4', 1 , 'CDB', 'Stage', 0),
        (24, 'Gen4', 1 , 'CDB', 'Stage', 0),
        (8, 'Gen4', 0 , 'CDB', 'Stage', 0),
        (16, 'Gen4', 0 , 'CDB', 'Stage', 0),
        (24, 'Gen4', 0 , 'CDB', 'Stage', 0),
        (8, 'Gen4', 1 , 'TPCC', 'Stage', 0),
        (16, 'Gen4', 1 , 'TPCC', 'Stage', 0),
        (24, 'Gen4', 1 , 'TPCC', 'Stage', 0),
        (8, 'Gen4', 0 , 'TPCC', 'Stage', 0),
        (16, 'Gen4', 0 , 'TPCC', 'Stage', 0),
        (24, 'Gen4', 0 , 'TPCC', 'Stage', 0),
        (4, 'SVMLoose', 1 , 'CDB', 'SVMStage', 0),
        (8, 'SVMLoose', 1 , 'CDB', 'SVMStage', 0),
        (24, 'SVMLoose', 1 , 'CDB', 'SVMStage', 0),
        (40, 'SVMLoose', 1 , 'CDB', 'SVMStage', 0),
        (4, 'SVMLoose', 1 , 'TPCC', 'SVMStage', 0),
        (8, 'SVMLoose', 1 , 'TPCC', 'SVMStage', 0),
        (24, 'SVMLoose', 1 , 'TPCC', 'SVMStage', 0),
        (40, 'SVMLoose', 1 , 'TPCC', 'SVMStage', 0),
        (4, 'SVMTight', 1 , 'CDB', 'SVMStage', 0),
        (8, 'SVMTight', 1 , 'CDB', 'SVMStage', 0),
        (24, 'SVMTight', 1 , 'CDB', 'SVMStage', 0),
        (40, 'SVMTight', 1 , 'CDB', 'SVMStage', 0),
        (4, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (8, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (16, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (24, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (32, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (40, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (64, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (4, 'SVMTight', 1 , 'TPCC', 'SVMStage', 0),
        (8, 'SVMTight', 1 , 'TPCC', 'SVMStage', 0),
        (24, 'SVMTight', 1 , 'TPCC', 'SVMStage', 0),
        (40, 'SVMTight', 1 , 'TPCC', 'SVMStage', 0),
        (4, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (8, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (16, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (24, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (32, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (40, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (64, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0)

MERGE [scheduled_benchmarks] AS [target]
USING @scheduled_benchmarks_tmp AS source
ON (target.[processor_count] = source.[processor_count]
    AND target.[hardware_generation] = source.[hardware_generation]
    AND target.[is_bc] = source.[is_bc]
    AND target.[benchmark_name] = source.[benchmark_name]
    AND target.[environment] = source.[environment])
WHEN NOT MATCHED THEN
        INSERT
        (
                [processor_count],
                [hardware_generation],
                [is_bc],
                [benchmark_name],
                [environment],
                [is_picked_up],
                [is_adhoc_run]
        ) VALUES
        (
                [source].[processor_count],
                [source].[hardware_generation],
                [source].[is_bc],
                [source].[benchmark_name],
                [source].[environment],
                [source].[is_picked_up],
                0
        );
COMMIT TRANSACTION INIT_SLO_BENCH

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
ALTER DATABASE [$(DatabaseName)]
    SET ENCRYPTION ON 
    WITH ROLLBACK IMMEDIATE;


GO
