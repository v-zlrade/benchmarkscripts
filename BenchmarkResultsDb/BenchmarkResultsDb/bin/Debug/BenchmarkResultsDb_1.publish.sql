/*
Deployment script for clperftesting

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "clperftesting"
:setvar DefaultFilePrefix "clperftesting"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
/*
The column [dbo].[benchmark_runs].[parallel_exec_cnt] on table [dbo].[benchmark_runs] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[benchmark_runs])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[scheduled_benchmarks].[parallel_exec_cnt] on table [dbo].[scheduled_benchmarks] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[scheduled_benchmarks])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[slo_benchmark_config].[parallel_exec_cnt] on table [dbo].[slo_benchmark_config] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[slo_benchmark_config])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping unnamed constraint on [dbo].[scheduled_benchmarks]...';


GO
ALTER TABLE [dbo].[scheduled_benchmarks] DROP CONSTRAINT [DF__tmp_ms_xx__is_ad__756D6ECB];


GO
PRINT N'Dropping unnamed constraint on [dbo].[slo_benchmark_config]...';


GO
ALTER TABLE [dbo].[slo_benchmark_config] DROP CONSTRAINT [DF__slo_bench__email__607251E5];


GO
PRINT N'Dropping [dbo].[fk_scheduled_benchmarks]...';


GO
ALTER TABLE [dbo].[adhoc_run_configs] DROP CONSTRAINT [fk_scheduled_benchmarks];


GO
PRINT N'Dropping [dbo].[fk_instance_id_instance_state]...';


GO
ALTER TABLE [dbo].[benchmark_runs] DROP CONSTRAINT [fk_instance_id_instance_state];


GO
PRINT N'Dropping [dbo].[fk_run_id_benchmark_runs]...';


GO
ALTER TABLE [dbo].[benchmark_action_executions] DROP CONSTRAINT [fk_run_id_benchmark_runs];


GO
PRINT N'Dropping [dbo].[fk_benchmark_results_run_id]...';


GO
ALTER TABLE [dbo].[benchmark_results] DROP CONSTRAINT [fk_benchmark_results_run_id];


GO
PRINT N'Dropping [dbo].[fk_scheduled_benchmark_id]...';


GO
ALTER TABLE [dbo].[scheduled_benchmark_actions] DROP CONSTRAINT [fk_scheduled_benchmark_id];


GO
PRINT N'Dropping [dbo].[fk_scheduled_benchmarks_slo_name_benchmark_name_environment]...';


GO
ALTER TABLE [dbo].[scheduled_benchmarks] DROP CONSTRAINT [fk_scheduled_benchmarks_slo_name_benchmark_name_environment];


GO
PRINT N'Dropping [dbo].[fk_jobs]...';


GO
ALTER TABLE [dbo].[scheduled_benchmarks] DROP CONSTRAINT [fk_jobs];


GO
PRINT N'Dropping [dbo].[fk_config_override_id]...';


GO
ALTER TABLE [dbo].[config_override] DROP CONSTRAINT [fk_config_override_id];


GO
PRINT N'Dropping [dbo].[fk_slo_benchmark_config_slo_name_benchmark_name_environment]...';


GO
ALTER TABLE [dbo].[scheduled_adhoc_runs_history] DROP CONSTRAINT [fk_slo_benchmark_config_slo_name_benchmark_name_environment];


GO
PRINT N'Removing schema binding from [dbo].[scheduled_benchmarks_view]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[scheduled_benchmarks_view]
AS
SELECT sb.id,
       sb.job_id,
       sb.benchmark_name,
       sb.environment,
       sb.hardware_generation,
       sb.processor_count,
       sb.is_bc,
       sb.is_picked_up,
       sb.is_adhoc_run,
       ISNULL(sar.benchmark_scaling_argument, sbc.benchmark_scaling_argument) AS benchmark_scaling_argument,
       sar.correlation_id,
       ISNULL(sar.custom_master_tsql_query, sbc.custom_master_tsql_query) AS custom_master_tsql_query,
       ISNULL(sar.region, sbc.region) AS region,
       ISNULL(sar.server_name, sbc.server_name) AS server_name,
       ISNULL(sar.[database_name], sbc.[database_name]) AS [database_name],
       sar.[priority],
       ISNULL(sar.required_processor_count, sbc.required_processor_count) AS required_processor_count,
       ISNULL(sar.scaled_down, sbc.scaled_down) AS scaled_down,
       ISNULL(sar.worker_number, sbc.worker_number) AS worker_number,
       sar.scheduled_by,
       sar.should_restore,
       ISNULL(sar.warmup_timespan_minutes, sbc.warmup_timespan_minutes) AS warmup_timespan_minutes,
       ISNULL(sar.run_timespan_minutes, sbc.run_timespan_minutes) AS run_timespan_minutes,
       ISNULL(sar.scheduled_by, sbc.email_address) AS mail_to
FROM   dbo.scheduled_benchmarks AS sb
       LEFT OUTER JOIN
       dbo.adhoc_run_configs AS sar
       ON sb.id = sar.id
       INNER JOIN
       dbo.slo_benchmark_config AS sbc
       ON sbc.benchmark_name = sb.benchmark_name
          AND sbc.environment = sb.environment
          AND sbc.processor_count = sb.processor_count
          AND sbc.hardware_generation = sb.hardware_generation
          AND sbc.is_bc = sb.is_bc;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Starting rebuilding table [dbo].[adhoc_run_configs]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_adhoc_run_configs] (
    [id]                         INT              NOT NULL,
    [worker_number]              INT              NOT NULL,
    [benchmark_scaling_argument] INT              NOT NULL,
    [scaled_down]                BIT              NOT NULL,
    [region]                     VARCHAR (100)    NULL,
    [server_name]                NVARCHAR (1000)  NOT NULL,
    [database_name]              NVARCHAR (128)   NOT NULL,
    [warmup_timespan_minutes]    INT              NOT NULL,
    [run_timespan_minutes]       INT              NOT NULL,
    [custom_master_tsql_query]   NVARCHAR (MAX)   NULL,
    [required_processor_count]   INT              NULL,
    [parallel_exec_cnt]          INT              NULL,
    [priority]                   INT              NOT NULL,
    [should_restore]             BIT              NOT NULL,
    [correlation_id]             UNIQUEIDENTIFIER NOT NULL,
    [scheduled_by]               NVARCHAR (1024)  NULL,
    [comment]                    NVARCHAR (MAX)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_pk_adhoc_run_configs1] PRIMARY KEY CLUSTERED ([id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[adhoc_run_configs])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_adhoc_run_configs] ([id], [worker_number], [benchmark_scaling_argument], [scaled_down], [region], [server_name], [database_name], [warmup_timespan_minutes], [run_timespan_minutes], [custom_master_tsql_query], [required_processor_count], [priority], [should_restore], [correlation_id], [scheduled_by], [comment])
        SELECT   [id],
                 [worker_number],
                 [benchmark_scaling_argument],
                 [scaled_down],
                 [region],
                 [server_name],
                 [database_name],
                 [warmup_timespan_minutes],
                 [run_timespan_minutes],
                 [custom_master_tsql_query],
                 [required_processor_count],
                 [priority],
                 [should_restore],
                 [correlation_id],
                 [scheduled_by],
                 [comment]
        FROM     [dbo].[adhoc_run_configs]
        ORDER BY [id] ASC;
    END

DROP TABLE [dbo].[adhoc_run_configs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_adhoc_run_configs]', N'adhoc_run_configs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_pk_adhoc_run_configs1]', N'pk_adhoc_run_configs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[adhoc_run_configs].[nci_adhoc_run_configs_priority_id]...';


GO
CREATE NONCLUSTERED INDEX [nci_adhoc_run_configs_priority_id]
    ON [dbo].[adhoc_run_configs]([priority] DESC, [id] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[benchmark_runs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_benchmark_runs] (
    [run_id]                 BIGINT           IDENTITY (1, 1) NOT NULL,
    [scheduled_benchmark_id] BIGINT           NULL,
    [correlation_id]         UNIQUEIDENTIFIER NULL,
    [instance_id]            INT              NULL,
    [start_time]             DATETIME2 (0)    NOT NULL,
    [end_time]               DATETIME2 (0)    NULL,
    [benchmark_name]         VARCHAR (128)    NOT NULL,
    [processor_count]        INT              NOT NULL,
    [parallel_exec_cnt]      INT              NOT NULL,
    [hardware_generation]    VARCHAR (128)    NOT NULL,
    [is_bc]                  BIT              NOT NULL,
    [environment]            VARCHAR (128)    NULL,
    [comment]                NVARCHAR (MAX)   NULL,
    [mail_sent]              BIT              NULL,
    CONSTRAINT [tmp_ms_xx_constraint_pk_benchmark_runs1] PRIMARY KEY CLUSTERED ([run_id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[benchmark_runs])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_benchmark_runs] ON;
        INSERT INTO [dbo].[tmp_ms_xx_benchmark_runs] ([run_id], [scheduled_benchmark_id], [correlation_id], [instance_id], [start_time], [end_time], [benchmark_name], [processor_count], [hardware_generation], [is_bc], [environment], [comment], [mail_sent])
        SELECT   [run_id],
                 [scheduled_benchmark_id],
                 [correlation_id],
                 [instance_id],
                 [start_time],
                 [end_time],
                 [benchmark_name],
                 [processor_count],
                 [hardware_generation],
                 [is_bc],
                 [environment],
                 [comment],
                 [mail_sent]
        FROM     [dbo].[benchmark_runs]
        ORDER BY [run_id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_benchmark_runs] OFF;
    END

DROP TABLE [dbo].[benchmark_runs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_benchmark_runs]', N'benchmark_runs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_pk_benchmark_runs1]', N'pk_benchmark_runs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[benchmark_runs].[nci_benchmark_runs_start_time]...';


GO
CREATE NONCLUSTERED INDEX [nci_benchmark_runs_start_time]
    ON [dbo].[benchmark_runs]([start_time] DESC);


GO
PRINT N'Creating [dbo].[benchmark_runs].[nci_benchmark_runs_end_time_mail_sent]...';


GO
CREATE NONCLUSTERED INDEX [nci_benchmark_runs_end_time_mail_sent]
    ON [dbo].[benchmark_runs]([scheduled_benchmark_id] ASC, [run_id] ASC, [mail_sent] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[scheduled_benchmarks]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_scheduled_benchmarks] (
    [id]                  INT            IDENTITY (1, 1) NOT NULL,
    [job_id]              INT            NULL,
    [is_adhoc_run]        BIT            DEFAULT (0) NOT NULL,
    [processor_count]     INT            NOT NULL,
    [parallel_exec_cnt]   INT            NOT NULL,
    [hardware_generation] NVARCHAR (128) NOT NULL,
    [is_bc]               BIT            NOT NULL,
    [benchmark_name]      NVARCHAR (128) NOT NULL,
    [environment]         NVARCHAR (50)  NOT NULL,
    [is_picked_up]        BIGINT         NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_pk_scheduled_benchmarks1] PRIMARY KEY CLUSTERED ([id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[scheduled_benchmarks])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_scheduled_benchmarks] ON;
        INSERT INTO [dbo].[tmp_ms_xx_scheduled_benchmarks] ([id], [job_id], [is_adhoc_run], [processor_count], [hardware_generation], [is_bc], [benchmark_name], [environment], [is_picked_up])
        SELECT   [id],
                 [job_id],
                 [is_adhoc_run],
                 [processor_count],
                 [hardware_generation],
                 [is_bc],
                 [benchmark_name],
                 [environment],
                 [is_picked_up]
        FROM     [dbo].[scheduled_benchmarks]
        ORDER BY [id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_scheduled_benchmarks] OFF;
    END

DROP TABLE [dbo].[scheduled_benchmarks];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_scheduled_benchmarks]', N'scheduled_benchmarks';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_pk_scheduled_benchmarks1]', N'pk_scheduled_benchmarks', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[scheduled_benchmarks].[nci_scheduled_benchmarks_environment_include_is_picked_up]...';


GO
CREATE NONCLUSTERED INDEX [nci_scheduled_benchmarks_environment_include_is_picked_up]
    ON [dbo].[scheduled_benchmarks]([environment] ASC)
    INCLUDE([is_picked_up]);


GO
PRINT N'Starting rebuilding table [dbo].[slo_benchmark_config]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_slo_benchmark_config] (
    [processor_count]            INT             NOT NULL,
    [hardware_generation]        NVARCHAR (128)  NOT NULL,
    [is_bc]                      BIT             NOT NULL,
    [benchmark_name]             NVARCHAR (128)  NOT NULL,
    [worker_number]              INT             NOT NULL,
    [benchmark_scaling_argument] INT             NOT NULL,
    [scaled_down]                BIT             NOT NULL,
    [server_name]                NVARCHAR (1000) NOT NULL,
    [database_name]              NVARCHAR (128)  NOT NULL,
    [warmup_timespan_minutes]    INT             NOT NULL,
    [run_timespan_minutes]       INT             NOT NULL,
    [custom_master_tsql_query]   NVARCHAR (MAX)  NULL,
    [required_processor_count]   INT             NOT NULL,
    [parallel_exec_cnt]          INT             NOT NULL,
    [environment]                NVARCHAR (50)   NOT NULL,
    [region]                     VARCHAR (100)   NULL,
    [email_address]              NVARCHAR (512)  DEFAULT 'clperfdevs@service.microsoft.com' NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_slo_benchmark_config1] PRIMARY KEY CLUSTERED ([processor_count] ASC, [hardware_generation] ASC, [is_bc] ASC, [benchmark_name] ASC, [environment] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[slo_benchmark_config])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_slo_benchmark_config] ([processor_count], [hardware_generation], [is_bc], [benchmark_name], [environment], [worker_number], [benchmark_scaling_argument], [scaled_down], [server_name], [database_name], [warmup_timespan_minutes], [run_timespan_minutes], [custom_master_tsql_query], [required_processor_count], [region], [email_address])
        SELECT   [processor_count],
                 [hardware_generation],
                 [is_bc],
                 [benchmark_name],
                 [environment],
                 [worker_number],
                 [benchmark_scaling_argument],
                 [scaled_down],
                 [server_name],
                 [database_name],
                 [warmup_timespan_minutes],
                 [run_timespan_minutes],
                 [custom_master_tsql_query],
                 [required_processor_count],
                 [region],
                 [email_address]
        FROM     [dbo].[slo_benchmark_config]
        ORDER BY [processor_count] ASC, [hardware_generation] ASC, [is_bc] ASC, [benchmark_name] ASC, [environment] ASC;
    END

DROP TABLE [dbo].[slo_benchmark_config];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_slo_benchmark_config]', N'slo_benchmark_config';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_slo_benchmark_config1]', N'PK_slo_benchmark_config', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[fk_scheduled_benchmarks]...';


GO
ALTER TABLE [dbo].[adhoc_run_configs] WITH NOCHECK
    ADD CONSTRAINT [fk_scheduled_benchmarks] FOREIGN KEY ([id]) REFERENCES [dbo].[scheduled_benchmarks] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_instance_id_instance_state]...';


GO
ALTER TABLE [dbo].[benchmark_runs] WITH NOCHECK
    ADD CONSTRAINT [fk_instance_id_instance_state] FOREIGN KEY ([instance_id]) REFERENCES [dbo].[instance_state] ([instance_id]);


GO
PRINT N'Creating [dbo].[fk_run_id_benchmark_runs]...';


GO
ALTER TABLE [dbo].[benchmark_action_executions] WITH NOCHECK
    ADD CONSTRAINT [fk_run_id_benchmark_runs] FOREIGN KEY ([run_id]) REFERENCES [dbo].[benchmark_runs] ([run_id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_benchmark_results_run_id]...';


GO
ALTER TABLE [dbo].[benchmark_results] WITH NOCHECK
    ADD CONSTRAINT [fk_benchmark_results_run_id] FOREIGN KEY ([run_id]) REFERENCES [dbo].[benchmark_runs] ([run_id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_scheduled_benchmark_id]...';


GO
ALTER TABLE [dbo].[scheduled_benchmark_actions] WITH NOCHECK
    ADD CONSTRAINT [fk_scheduled_benchmark_id] FOREIGN KEY ([scheduled_benchmark_id]) REFERENCES [dbo].[scheduled_benchmarks] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_scheduled_benchmarks_slo_name_benchmark_name_environment]...';


GO
ALTER TABLE [dbo].[scheduled_benchmarks] WITH NOCHECK
    ADD CONSTRAINT [fk_scheduled_benchmarks_slo_name_benchmark_name_environment] FOREIGN KEY ([processor_count], [hardware_generation], [is_bc], [benchmark_name], [environment]) REFERENCES [dbo].[slo_benchmark_config] ([processor_count], [hardware_generation], [is_bc], [benchmark_name], [environment]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_jobs]...';


GO
ALTER TABLE [dbo].[scheduled_benchmarks] WITH NOCHECK
    ADD CONSTRAINT [fk_jobs] FOREIGN KEY ([job_id]) REFERENCES [dbo].[jobs] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_config_override_id]...';


GO
ALTER TABLE [dbo].[config_override] WITH NOCHECK
    ADD CONSTRAINT [fk_config_override_id] FOREIGN KEY ([id]) REFERENCES [dbo].[scheduled_benchmarks] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Adding schema binding to [dbo].[scheduled_benchmarks_view]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: scheduled_benchmarks_view.sql
--
-- @Owner: anjov
--
-- Purpose:
-- View over all types of scheduled benchmarks (regular and ad-hoc).
--
-- *********************************************************************
ALTER VIEW dbo.scheduled_benchmarks_view
WITH SCHEMABINDING
AS
    SELECT
        sb.id,
        sb.job_id,
        sb.benchmark_name,
        sb.environment,
        sb.hardware_generation,
        sb.processor_count,
		sb.parallel_exec_cnt,
        sb.is_bc,
        sb.is_picked_up,
        sb.is_adhoc_run,
        benchmark_scaling_argument = ISNULL(sar.benchmark_scaling_argument, sbc.benchmark_scaling_argument),
        sar.correlation_id,
        custom_master_tsql_query = ISNULL(sar.custom_master_tsql_query, sbc.custom_master_tsql_query),
        region = ISNULL(sar.region, sbc.region),
        server_name = ISNULL(sar.server_name, sbc.server_name),
        [database_name] = ISNULL(sar.[database_name], sbc.[database_name]),
        sar.[priority],
        required_processor_count = ISNULL(sar.required_processor_count, sbc.required_processor_count),
        scaled_down = ISNULL(sar.scaled_down, sbc.scaled_down),
        worker_number = ISNULL(sar.worker_number, sbc.worker_number),
        sar.scheduled_by,
        sar.should_restore,
        warmup_timespan_minutes = ISNULL(sar.warmup_timespan_minutes, sbc.warmup_timespan_minutes),
        run_timespan_minutes = ISNULL(sar.run_timespan_minutes, sbc.run_timespan_minutes),
        mail_to = ISNULL(sar.scheduled_by, sbc.email_address)
    FROM
        dbo.scheduled_benchmarks sb
            LEFT OUTER JOIN
        dbo.adhoc_run_configs sar
            ON sb.id = sar.id
            INNER JOIN
        dbo.slo_benchmark_config sbc
            ON sbc.benchmark_name = sb.benchmark_name
            AND sbc.environment = sb.environment
            AND sbc.processor_count = sb.processor_count
            AND sbc.hardware_generation = sb.hardware_generation
            AND sbc.is_bc = sb.is_bc
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[benchmark_runs_view]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: benchmark_runs_view.sql
--
-- @Owner: anjov
--
-- Purpose:
-- View over benchmark runs, incorporating data from scheduled_benchmarks and benchmark_results.
--
-- *********************************************************************
ALTER VIEW dbo.benchmark_runs_view
AS
    SELECT 
        br.run_id,
        br.instance_id,
        br.start_time,
        br.end_time,
        sbv.id,
        sbv.job_id,
        sbv.benchmark_name,
        benchmark_environment = sbv.environment,
        ist.instance_environment,
        ist.region,
        sbv.hardware_generation,
        sbv.server_name,
        sbv.[database_name],
        sbv.processor_count,
		sbv.parallel_exec_cnt,
        sbv.is_bc,
        sbv.is_picked_up,
        sbv.is_adhoc_run,
        sbv.benchmark_scaling_argument,
        sbv.correlation_id,
        sbv.custom_master_tsql_query,
        sbv.[priority],
        required_processor_count,
        scaled_down ,
        worker_number,
        scheduled_by,
        should_restore,
        warmup_timespan_minutes,
        run_timespan_minutes,
        instance_state = ist.[state],
        executed_actions = ( 
            SELECT a.action_type, ae.executed_time_utc 
            FROM scheduled_benchmark_actions a INNER JOIN benchmark_action_executions ae ON ae.action_id = a.action_id
            WHERE ae.run_id = br.run_id AND ae.executed_time_utc IS NOT NULL
            FOR JSON AUTO),
        benchmark_results = 
            (SELECT metric_name, metric_value FROM benchmark_results WHERE run_id = br.run_id FOR JSON AUTO)
		
    FROM 
        benchmark_runs br
            INNER JOIN
        scheduled_benchmarks_view sbv
            ON br.scheduled_benchmark_id = sbv.id
            INNER JOIN
        instance_state ist
            ON br.instance_id = ist.instance_id
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[unsent_benchmark_results_view]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[unsent_benchmark_results_view]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[get_pending_benchmark_actions]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[get_pending_benchmark_actions]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[schedule_adhoc_benchmark]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: schedule_adhoc_benchmark.sql
--
-- @Owner: v-milast
--
-- Stored procedure used to schedule adhoc runs, with desired parameters set as override.
-- If some argument is not specified default value is taken for that SLO
--
-- *********************************************************************
ALTER PROCEDURE [dbo].[schedule_adhoc_benchmark]
    @action_name NVARCHAR(64),
    @processor_count INT,
    @hardware_generation NVARCHAR(64),
    @environment NVARCHAR(64),
    @is_bc BIT,
    @should_restore BIT = 1,
    @priority INT = 0,
    @worker_number INT = NULL,
    @benchmark_scaling_argument INT = NULL,
    @scaled_down BIT = NULL,
    @region VARCHAR(100) = NULL,
    @server_name NVARCHAR(1000) = NULL,
    @database_name NVARCHAR(128) = NULL,
    @warmup_timespan_minutes INT = NULL,
    @run_timespan_minutes INT = NULL,
    @custom_master_tsql_query NVARCHAR(MAX) = NULL,
    @required_processor_count INT = NULL,
	@parallel_exec_cnt INT = NULL, 
    @scheduled_by NVARCHAR(1024) = NULL,
    @comment NVARCHAR(MAX) = NULL,
    @scheduled_benchmark_id INT = NULL OUTPUT
AS
BEGIN
    SELECT
        @worker_number = COALESCE(@worker_number, [worker_number]),
        @benchmark_scaling_argument = COALESCE(@benchmark_scaling_argument, [benchmark_scaling_argument]),
        @scaled_down = COALESCE(@scaled_down, [scaled_down]),
        @region = COALESCE(@region, [region]),
        @server_name = COALESCE(@server_name, [server_name]),
        @database_name = COALESCE(@database_name, [database_name]),
        @warmup_timespan_minutes = COALESCE(@warmup_timespan_minutes, [warmup_timespan_minutes]),
        @run_timespan_minutes = COALESCE(@run_timespan_minutes, [run_timespan_minutes]),
        @custom_master_tsql_query = COALESCE(@custom_master_tsql_query, [custom_master_tsql_query]),
        @required_processor_count = COALESCE(@required_processor_count, [required_processor_count]),
		@parallel_exec_cnt  = COALESCE(@parallel_exec_cnt, [parallel_exec_cnt])
    FROM [slo_benchmark_config]
    WHERE [benchmark_name] = @action_name
    AND [environment] = @environment
    AND [processor_count] = @processor_count
    AND [hardware_generation] = @hardware_generation
    AND [is_bc] = @is_bc

    IF @scheduled_by IS NOT NULL
        SET @scheduled_by = CONCAT(@scheduled_by, '@microsoft.com')
    ELSE IF (CHARINDEX('@microsoft', SUSER_NAME()) > 0)
        SET @scheduled_by = SUSER_NAME()

    BEGIN TRANSACTION

        INSERT INTO [dbo].[scheduled_benchmarks]
            ([is_adhoc_run], [processor_count], [parallel_exec_cnt], [hardware_generation], [is_bc], [benchmark_name], [environment], [is_picked_up])
        VALUES
            (1, @processor_count, @parallel_exec_cnt, @hardware_generation, @is_bc, @action_name, @environment, 0)

        SET @scheduled_benchmark_id = SCOPE_IDENTITY()

        INSERT INTO [dbo].[adhoc_run_configs]
        (
            [id],
            [worker_number],
            [benchmark_scaling_argument],
            [scaled_down],
            [region],
            [server_name],
            [database_name],
            [warmup_timespan_minutes],
            [run_timespan_minutes],
            [custom_master_tsql_query],
            [required_processor_count],
			[parallel_exec_cnt],
            [priority],
            [should_restore],
            [correlation_id],
            [scheduled_by],
            [comment]
        ) VALUES
        (
            @scheduled_benchmark_id,
            @worker_number,
            @benchmark_scaling_argument,
            @scaled_down,
            @region,
            @server_name,
            @database_name,
            @warmup_timespan_minutes,
            @run_timespan_minutes,
            @custom_master_tsql_query,
            @required_processor_count,
			@parallel_exec_cnt,
            @priority,
            @should_restore,
            NEWID(),
            @scheduled_by,
            @comment
         )

     COMMIT TRANSACTION
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[schedule_adhoc_benchmark_override]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ************************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: schedule_adhoc_benchmark_override.sql
--
-- @Owner: v-dukut
--
-- Purpose: Stored procedure used to schedule adhoc runs, with desired parameters set as override.
--			config overrides + instance, database and slo property bag overrides
--			If some argument is not specified default value is taken for that SLO
--			Behaves same as schedule_adhoc_benchmark procedure + job_id and config_override columns
--			(This isn't added in schedule_adhoc_benchmark procedure since only v-dukut uses it)
--
-- ************************************************************************

ALTER PROCEDURE [dbo].[schedule_adhoc_benchmark_override]
	@action_name NVARCHAR(64),
	@processor_count INT,
	@hardware_generation NVARCHAR(64),
	@environment NVARCHAR(64),
	@is_bc BIT,
	@should_restore BIT = 1,
	@priority INT = 0,
	@worker_number INT = NULL,
	@benchmark_scaling_argument INT = NULL,
	@scaled_down BIT = NULL,
	@region VARCHAR(100) = NULL,
	@server_name NVARCHAR(1000) = NULL,
	@database_name NVARCHAR(128) = NULL,
	@warmup_timespan_minutes INT = NULL,
	@run_timespan_minutes INT = NULL,
	@custom_master_tsql_query NVARCHAR(MAX) = NULL,
	@required_processor_count INT = NULL,
	@parallel_exec_cnt INT = NULL,
	@scheduled_by NVARCHAR(1024) = NULL,
	@comment NVARCHAR(MAX) = NULL,

	@job_id INT = NULL,

	@config_names NVARCHAR(MAX) NULL,
	@config_values NVARCHAR(MAX) NULL,
	@instance_settings_overrides NVARCHAR(MAX) NULL,
	@database_settings_overrides NVARCHAR(MAX) NULL,
	@slo_property_bag_overrides NVARCHAR(MAX) NULL,
	@trace_flags NVARCHAR(MAX) NULL,

	@scheduled_benchmark_id INT = NULL OUTPUT
AS
BEGIN
		-- Python library for connecting to database doesn't works properly if
		-- anything is displayed in the message
		SET NOCOUNT ON;  

		SELECT
		@worker_number = COALESCE(@worker_number, [worker_number]),
		@benchmark_scaling_argument = COALESCE(@benchmark_scaling_argument, [benchmark_scaling_argument]),
		@scaled_down = COALESCE(@scaled_down, [scaled_down]),
		@region = COALESCE(@region, [region]),
		@server_name = COALESCE(@server_name, [server_name]),
		@database_name = COALESCE(@database_name, [database_name]),
		@warmup_timespan_minutes = COALESCE(@warmup_timespan_minutes, [warmup_timespan_minutes]),
		@run_timespan_minutes = COALESCE(@run_timespan_minutes, [run_timespan_minutes]),
		@custom_master_tsql_query = COALESCE(@custom_master_tsql_query, [custom_master_tsql_query]),
		@required_processor_count = COALESCE(@required_processor_count, [required_processor_count]),
		@parallel_exec_cnt = COALESCE(@parallel_exec_cnt, [parallel_exec_cnt])
		FROM [slo_benchmark_config]
		WHERE [benchmark_name] = @action_name
		AND [environment] = @environment
		AND [processor_count] = @processor_count
		AND [hardware_generation] = @hardware_generation
		AND [is_bc] = @is_bc

		IF @scheduled_by IS NOT NULL
		SET @scheduled_by = CONCAT(@scheduled_by, '@microsoft.com')
		ELSE IF (CHARINDEX('@microsoft', SUSER_NAME()) > 0)
		SET @scheduled_by = SUSER_NAME()

		BEGIN TRANSACTION

		INSERT INTO [dbo].[scheduled_benchmarks]
			([is_adhoc_run], [processor_count], [parallel_exec_cnt], [hardware_generation], [is_bc], [benchmark_name], [environment], [is_picked_up], [job_id])
		VALUES
			(1, @processor_count, @parallel_exec_cnt, @hardware_generation, @is_bc, @action_name, @environment, 0, @job_id)

		SET @scheduled_benchmark_id = SCOPE_IDENTITY()

		INSERT INTO [dbo].[adhoc_run_configs]
		(
			[id],
			[worker_number],
			[benchmark_scaling_argument],
			[scaled_down],
			[region],
			[server_name],
			[database_name],
			[warmup_timespan_minutes],
			[run_timespan_minutes],
			[custom_master_tsql_query],
			[required_processor_count],
			[parallel_exec_cnt],
			[priority],
			[should_restore],
			[correlation_id],
			[scheduled_by],
			[comment]
		) VALUES
		(
			@scheduled_benchmark_id,
			@worker_number,
			@benchmark_scaling_argument,
			@scaled_down,
			@region,
			@server_name,
			@database_name,
			@warmup_timespan_minutes,
			@run_timespan_minutes,
			@custom_master_tsql_query,
			@required_processor_count,
			@parallel_exec_cnt,
			@priority,
			@should_restore,
			NEWID(),
			@scheduled_by,
			@comment
			)

		INSERT INTO [dbo].[config_override]
		(
		[id],
		[config_override],
		[config_names],
		[config_values],
		[instance_settings_overrides],
		[database_settings_overrides],
		[slo_property_bag_overrides],
		[trace_flags]

		) VALUES
		(
		@scheduled_benchmark_id,
		(SELECT @config_names AS ConfigNames, @config_values AS ConfigValues FOR JSON PATH),
		@config_names,
		@config_values,
		@instance_settings_overrides,
		@database_settings_overrides,
		@slo_property_bag_overrides,
		@trace_flags
		)

		DECLARE @config_action_parameters_json NVARCHAR(MAX),
				@property_action_parameters_json NVARCHAR(MAX)

		--action SetConfigOverride 
		SET @config_action_parameters_json = (SELECT config_names, config_values
											FROM config_override
											WHERE id = @scheduled_benchmark_id FOR JSON AUTO)

		EXEC add_action_to_scheduled_benchmark
			@scheduled_benchmark_id = @scheduled_benchmark_id,
			@action_type = 'SetConfigOverride',
			@required_benchmark_state = 'Setup',
			@offset_seconds = 0,
			@action_parameters_json = @config_action_parameters_json

		--action SetPropertyOverride	
		SET @property_action_parameters_json = (SELECT instance_settings_overrides, database_settings_overrides, slo_property_bag_overrides
										FROM config_override
										WHERE id = @scheduled_benchmark_id FOR JSON AUTO) 

		EXEC add_action_to_scheduled_benchmark
			@scheduled_benchmark_id = @scheduled_benchmark_id,
			@action_type = 'SetPropertyOverride',
			@required_benchmark_state = 'ConfigOverridesApplied',
			@offset_seconds = 0,
			@action_parameters_json = @property_action_parameters_json


		COMMIT TRANSACTION
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[get_next_action]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: get_next_action.sql
--
-- @Owner: v-milast
--
-- Returns action to execute with parameters, based on available resources and environment
-- DEVNOTE: This SP is not thread safe for same environment provided as parameter
-- Different environments can operate at same time
-- It is not thread safe because it first READS and later on UPDATEs read values
--
-- *********************************************************************
ALTER PROCEDURE [dbo].[get_next_action]
    @available_cores INT,
    @environment NVARCHAR(64)
AS
BEGIN
    -- Python is getting confused if anything is displayed in messages
    SET NOCOUNT ON;

    DECLARE @benchmark_name NVARCHAR(128);
    DECLARE @processor_count INT = NULL;
    DECLARE @is_bc BIT = NULL;
    DECLARE @hardware_generation NVARCHAR(64) = NULL;
    DECLARE @worker_number INT = NULL;
    DECLARE @benchmark_scaling_argument INT = NULL;
    DECLARE @scaled_down BIT = NULL;
    DECLARE @server_name NVARCHAR(1000) = NULL;
    DECLARE @database_name NVARCHAR(128) = NULL;
    DECLARE @warmup_timespan_minutes INT = NULL;
    DECLARE @run_timespan_minutes INT = NULL;
    DECLARE @custom_master_tsql_query NVARCHAR(MAX) = NULL;
    DECLARE @required_processor_count INT = NULL;
	DECLARE @parallel_exec_cnt INT = NULL;
    DECLARE @id INT = NULL;
    DECLARE @scheduled_count INT = NULL;
    DECLARE @should_restore BIT;
    DECLARE @correlation_id UNIQUEIDENTIFIER;
    DECLARE @has_result BIT = 0;

    -- Auto rollback if exception happens
    SET XACT_ABORT ON

    -- DEVNOTE: We are blocking stage deployments with restore, so hard code to not work during update hours
    -- from 00:00AM to 11AM
    DECLARE @current_timestamp DATETIME2(0) = GETUTCDATE()
    DECLARE @stage_scheduled_runs_embargo BIT = 0
    IF ((@environment = 'Stage' OR @environment = 'SVMStage') AND DATEPART(HOUR, @current_timestamp) >= 0 AND DATEPART(HOUR, @current_timestamp) <= 11)
    BEGIN
        SET @stage_scheduled_runs_embargo = 1;
    END

    BEGIN TRANSACTION GET_NEXT_ACTION_TRAN
    -- Prioritizes ad hoc runs
    -- we cannot put instance_state in this query as we want scheduled with highest priority to be executed next, no matter whether instance is available or not
    SELECT TOP 1
        @id = [id],
        @benchmark_name = [benchmark_name],
        @processor_count = [processor_count],
        @is_bc = [is_bc],
        @hardware_generation = [hardware_generation],
        @worker_number = [worker_number],
        @benchmark_scaling_argument = [benchmark_scaling_argument],
        @scaled_down = [scaled_down],
        @server_name = [server_name],
        @database_name = [database_name],
        @warmup_timespan_minutes = [warmup_timespan_minutes],
        @run_timespan_minutes = [run_timespan_minutes],
        @custom_master_tsql_query = [custom_master_tsql_query],
        @required_processor_count = [required_processor_count],
		@parallel_exec_cnt = [parallel_exec_cnt],
        @should_restore = [should_restore],
        @correlation_id = [correlation_id]
    FROM [scheduled_benchmarks_view]
    WHERE 
        environment = @environment
        AND [is_adhoc_run] = 1
        AND [is_picked_up] = 0
        AND [server_name] NOT IN
        (
            SELECT [instance_name]
            FROM [occupied_instances_view]
        )
    ORDER BY [priority] DESC, [id] ASC

    -- if no ad hoc run scheduled get regular runs
    IF @server_name IS NULL
    BEGIN
        SELECT TOP 1
            @id = [id],
            @benchmark_name = [benchmark_name],
            @processor_count = [processor_count],
            @is_bc = [is_bc],
            @hardware_generation = [hardware_generation],
            @worker_number = [worker_number],
            @benchmark_scaling_argument = [benchmark_scaling_argument],
            @scaled_down = [scaled_down],
            @server_name = [server_name],
            @database_name = [database_name],
            @warmup_timespan_minutes = [warmup_timespan_minutes],
            @run_timespan_minutes = [run_timespan_minutes],
            @custom_master_tsql_query = [custom_master_tsql_query],
            @required_processor_count = [required_processor_count],
			@parallel_exec_cnt = [parallel_exec_cnt],
            @should_restore = 1,
            @correlation_id = NEWID()
        FROM [scheduled_benchmarks_view]
        WHERE [environment] = @environment
        AND [required_processor_count] <= @available_cores
        AND [server_name] NOT IN
        (
            SELECT [instance_name]
            FROM [occupied_instances_view]
        )
        AND [is_picked_up] = 0
		AND @stage_scheduled_runs_embargo = 0
        ORDER BY [required_processor_count] DESC, [id] ASC

        -- only update if we actually got some @server_name back
        IF (@server_name IS NOT NULL)
        BEGIN
            UPDATE [scheduled_benchmarks]
            SET [is_picked_up] = 1
            WHERE [id] = @id

            SET @has_result = 1;

            -- If all recurring benchmarks are already picked up, reset is_picked_up to 0, so we can start a new cycle.
            IF NOT EXISTS (
                SELECT 1 FROM [scheduled_benchmarks] 
                WHERE [environment] = @environment AND [is_adhoc_run] = 0 AND [is_picked_up] = 0
            )
            BEGIN
                UPDATE [scheduled_benchmarks]
                SET [is_picked_up] = 0
                WHERE [environment] = @environment AND [is_adhoc_run] = 0
            END
        END
    END
    ELSE
    BEGIN
        -- only update if there are enough resources to run and instance is available
        IF (@required_processor_count <= @available_cores)
        BEGIN
            UPDATE [scheduled_benchmarks]
            SET [is_picked_up] = 1
            WHERE [id] = @id

            SET @has_result = 1;
        END
    END

    -- return results only if there are enough resources
    IF @has_result = 1
    BEGIN
        -- upsert state of instance
        EXEC upsert_instance
            @instance_name = @server_name,
            @state = 'Occupied';

        SELECT
            @id as [scheduled_benchmark_id],
            @benchmark_name AS [benchmark_name],
            @processor_count AS [processor_count],
            @is_bc AS [is_bc],
            @hardware_generation AS [hardware_generation],
            @worker_number AS [worker_number],
            @benchmark_scaling_argument AS [benchmark_scaling_argument],
            @scaled_down AS [scaled_down],
            @server_name AS [server_name],
            @database_name AS [database_name],
            @warmup_timespan_minutes AS [warmup_timespan_minutes],
            @run_timespan_minutes AS [run_timespan_minutes],
            @custom_master_tsql_query AS [custom_master_tsql_query],
            @should_restore AS [should_restore],
            @required_processor_count AS [required_processor_count],
			@parallel_exec_cnt AS [parallel_exec_cnt],
            @correlation_id AS [correlation_id]
    END

    COMMIT TRANSACTION GET_NEXT_ACTION_TRAN
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[start_benchmark]...';


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: start_benchmark.sql
--
-- @Owner: v-milast
--
-- Purpose:
-- This stored procedure is used to initialize benchmark for runs.
-- It returns run_id
--
-- *********************************************************************
ALTER PROCEDURE [dbo].[start_benchmark]
	@benchmark_name VARCHAR(128),
	@processor_count INT,
	@hardware_generation VARCHAR(128),
	@parallel_exec_cnt INT = NULL,
	@environment VARCHAR(128) = NULL,
	@instance_dns_name VARCHAR(1000) = NULL,
	@comment NVARCHAR(MAX) = NULL,
	@correlation_id UNIQUEIDENTIFIER = NULL,
	@is_bussiness_critical BIT = 0
AS
BEGIN
	DECLARE @instance_id INT

	SELECT
		@instance_id = [instance_id]
	FROM
		[instance_state]
	WHERE
		[instance_name] = @instance_dns_name

	INSERT INTO [benchmark_runs]
	(
		[start_time],
		[benchmark_name],
		[instance_id],
		[processor_count],
		[parallel_exec_cnt],
		[hardware_generation],
		[environment],
		[comment],
		[correlation_id],
		[is_bc],
		[mail_sent]
	)
	OUTPUT [inserted].[run_id]
	VALUES
	(
		GETUTCDATE(),
		@benchmark_name,
		@instance_id,
		@processor_count,
		@parallel_exec_cnt,
		@hardware_generation,
		@environment,
		@comment,
		@correlation_id,
		@is_bussiness_critical,
		0
	)
END
GO
PRINT N'Altering [dbo].[start_scheduled_benchmark]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- *********************************************************************
-- Copyright (c) Microsoft Corporation.
--
-- @File: start_scheduled_benchmark.sql
--
-- @Owner: anjov
--
-- Purpose:
-- Starts a scheduled benchmark run, specified by its ID, on the given instance.
-- Also schedules any actions connected to the benchmark.
--
-- *********************************************************************
ALTER PROCEDURE [dbo].[start_scheduled_benchmark]
	@scheduled_benchmark_id INT,
	@instance_dns_name VARCHAR(1000),
	@comment NVARCHAR(MAX) = NULL,
	@correlation_id UNIQUEIDENTIFIER = NULL
AS
	DECLARE @benchmark_run_id INT
	DECLARE @instance_id INT

	SELECT
		@instance_id = [instance_id]
	FROM
		[instance_state]
	WHERE
		[instance_name] = @instance_dns_name

	INSERT INTO benchmark_runs
	(
		start_time,
		scheduled_benchmark_id,
		benchmark_name,
		instance_id,
		processor_count,
		parallel_exec_cnt,
		hardware_generation,
		environment,
		comment,
		correlation_id,
		is_bc
	)
	SELECT
		GETUTCDATE(),
		id,
		benchmark_name,
		@instance_id,
		processor_count,
		parallel_exec_cnt,
		hardware_generation,
		environment,
		@comment,
		@correlation_id,
		is_bc
	FROM
		scheduled_benchmarks
	WHERE
		id = @scheduled_benchmark_id

	SET @benchmark_run_id = SCOPE_IDENTITY()

	UPDATE benchmark_action_executions
	SET run_id = @benchmark_run_id
	WHERE action_id IN (
		SELECT action_id
		FROM scheduled_benchmark_actions
		WHERE scheduled_benchmark_id = @scheduled_benchmark_id)

	SELECT @benchmark_run_id AS [run_id]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[schedule_job]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[schedule_job]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[exec_and_verify_get_next_action]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[exec_and_verify_get_next_action]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[end_benchmark]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[end_benchmark]';


GO
PRINT N'Refreshing [dbo].[mark_mail_sent]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[mark_mail_sent]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[test_cleanup]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[test_cleanup]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[test_get_next_action]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[test_get_next_action]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[test_benchmark_actions]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[test_benchmark_actions]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[run_tests]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[run_tests]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/


-- We can only set one file to be post deploy script
-- so we call other scripts here
--

-- Insert data to slo benchmark config
SET XACT_ABORT ON

BEGIN TRANSACTION INIT_SLO_BENCH

DECLARE @slo_benchmark_config_tmp TABLE
(
    [processor_count] INT NOT NULL,
	[parallel_exec_cnt] INT NOT NULL,
    [hardware_generation] NVARCHAR(128) NOT NULL,
    [is_bc] BIT NOT NULL,
    [benchmark_name] NVARCHAR(128) NOT NULL,
    [worker_number] INT NOT NULL,
    [benchmark_scaling_argument] INT NOT NULL,
    [scaled_down] BIT NOT NULL,
    [server_name] NVARCHAR(1000) NOT NULL,
    [database_name] NVARCHAR(128) NOT NULL,
    [warmup_timespan_minutes] INT NOT NULL,
    [run_timespan_minutes] INT NOT NULL,
    [custom_master_tsql_query] NVARCHAR(MAX) NULL,
    [required_processor_count] INT NOT NULL,
    [environment] NVARCHAR(50) NOT NULL
)

INSERT INTO @slo_benchmark_config_tmp
(
        [processor_count],
		[parallel_exec_cnt],
        [hardware_generation],
        [is_bc],
        [benchmark_name],
        [worker_number],
        [benchmark_scaling_argument],
        [scaled_down],
        [server_name],
        [database_name],
        [warmup_timespan_minutes],
        [run_timespan_minutes],
        [environment],
        [custom_master_tsql_query],
        [required_processor_count]
)
VALUES
        -- GEN 4 PROD
        (8, 1, 'GEN4', 0, 'CDB', 1120, 15000, 0, 'clperftestin02.wcus10d832431fca2.database.windows.net', 'cdb15000', 15, 60, 'ProdG4', NULL, 2),
        (16, 1, 'GEN4', 0, 'CDB', 1600, 15000, 0, 'clperftesting01.wcus10d832431fca2.database.windows.net', 'cdb15000', 15, 60, 'ProdG4', NULL, 3),
        (24, 1, 'GEN4', 0, 'CDB', 1600, 30000, 0, 'clperftesting03.wcus10d832431fca2.database.windows.net', 'cdb30000', 15, 60, 'ProdG4', NULL, 4),
        (8, 1, 'GEN4', 1, 'CDB', 1120, 15000, 0, 'clperftesting-gen4-bc8-wcus-01.wcus10d832431fca2.database.windows.net', 'cdb15000', 15, 60, 'ProdG4', NULL, 2),
        (16, 1, 'GEN4', 1, 'CDB', 2240, 15000, 0, 'clperftesting-gen4-bc16-wcus-01.wcus10d832431fca2.database.windows.net', 'cdb15000', 15, 60, 'ProdG4', NULL, 3),
        (24, 1, 'GEN4', 1, 'CDB', 3360, 30000, 0, 'clperftesting-gen4-bc24-wcus-01.wcus10d832431fca2.database.windows.net', 'cdb30000', 15, 60, 'ProdG4', NULL, 4),
        (8, 1, 'GEN4', 0, 'TPCC', 100, 4000, 0, 'clperftestin02.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 2),
        (16, 1, 'GEN4', 0, 'TPCC', 200, 4000, 0, 'clperftesting01.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 3),
        (24, 1, 'GEN4', 0, 'TPCC', 300, 4000, 0, 'clperftesting03.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 4),
        (8, 1, 'GEN4', 1, 'TPCC', 100, 4000, 0, 'clperftesting-gen4-bc8-wcus-01.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 2),
        (16, 1, 'GEN4', 1, 'TPCC', 200, 4000, 0, 'clperftesting-gen4-bc16-wcus-01.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 3),
        (24, 1, 'GEN4', 1, 'TPCC', 300, 4000, 0, 'clperftesting-gen4-bc24-wcus-01.wcus10d832431fca2.database.windows.net', 'tpcc4000', 15, 120, 'ProdG4', NULL, 4),
        -- GEN 5 PROD
        (8, 1, 'GEN5', 0, 'CDB', 720, 15000, 0, 'clperftesting-gen5-gp8-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 60, 'ProdG5', NULL, 2),
        (16, 1, 'GEN5', 0, 'CDB', 1440, 15000, 0, 'clperftesting-gen5-gp16-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 60, 'ProdG5', NULL, 3),
        (24, 1, 'GEN5', 0, 'CDB', 1600, 15000, 0, 'clperftesting-gen5-gp24-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 60, 'ProdG5', NULL, 4),
        (32, 1, 'GEN5', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp32-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 60, 'ProdG5', NULL, 5),
        (40, 1, 'GEN5', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp40-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 60, 'ProdG5', NULL, 6),
        (64, 1, 'GEN5', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp64-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 60, 'ProdG5', NULL, 7),
        (80, 1, 'GEN5', 0, 'CDB', 1600, 40000, 0, 'clperftesting-gen5-gp80-weu-01.weu14c689be44714.database.windows.net', 'cdb40000', 30, 60, 'ProdG5', NULL, 8),
        (8, 1, 'GEN5', 1, 'CDB', 720, 15000, 0, 'clperftesting-gen5-bc8-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 60, 'ProdG5', NULL, 2),
        (16, 1, 'GEN5', 1, 'CDB', 1440, 15000, 0, 'clperftesting-gen5-bc16-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 60, 'ProdG5', NULL, 3),
        (24, 1, 'GEN5', 1, 'CDB', 2160, 30000, 0, 'clperftesting-gen5-bc24-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 60, 'ProdG5', NULL, 4),
        (32, 1, 'GEN5', 1, 'CDB', 2880, 30000, 0, 'clperftesting-gen5-bc32-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 60, 'ProdG5', NULL, 5),
        (40, 1, 'GEN5', 1, 'CDB', 3600, 30000, 0, 'clperftesting-gen5-bc40-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 60, 'ProdG5', NULL, 6),
        (64, 1, 'GEN5', 1, 'CDB', 5765, 30000, 0, 'clperftesting-gen5-bc64-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 60, 'ProdG5', NULL, 7),
        (80, 1, 'GEN5', 1, 'CDB', 7200, 40000, 0, 'clperftesting-gen5-bc80-weu-01.weu14c689be44714.database.windows.net', 'cdb40000', 30, 60, 'ProdG5', NULL, 8),
        (8, 1, 'GEN5', 0, 'TPCC', 100, 4000, 0, 'clperftesting-gen5-gp8-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 2),
        (16, 1, 'GEN5', 0, 'TPCC', 200, 4000, 0, 'clperftesting-gen5-gp16-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 3),
        (24, 1, 'GEN5', 0, 'TPCC', 300, 4000, 0, 'clperftesting-gen5-gp24-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 4),
        (32, 1, 'GEN5', 0, 'TPCC', 400, 4000, 0, 'clperftesting-gen5-gp32-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 5),
        (40, 1, 'GEN5', 0, 'TPCC', 500, 4000, 0, 'clperftesting-gen5-gp40-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 6),
        (64, 1, 'GEN5', 0, 'TPCC', 800, 4000, 0, 'clperftesting-gen5-gp64-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 7),
        (80, 1, 'GEN5', 0, 'TPCC', 1000, 4000, 0, 'clperftesting-gen5-gp80-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 8),
        (8, 1, 'GEN5', 1, 'TPCC', 100, 4000, 0, 'clperftesting-gen5-bc8-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 2),
        (16, 1, 'GEN5', 1, 'TPCC', 200, 4000, 0, 'clperftesting-gen5-bc16-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 3),
        (24, 1, 'GEN5', 1, 'TPCC', 300, 4000, 0, 'clperftesting-gen5-bc24-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 4),
        (32, 1, 'GEN5', 1, 'TPCC', 400, 4000, 0, 'clperftesting-gen5-bc32-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 15, 120, 'ProdG5', NULL, 5),
        (40, 1, 'GEN5', 1, 'TPCC', 500, 4000, 0, 'clperftesting-gen5-bc40-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 6),
        (64, 1, 'GEN5', 1, 'TPCC', 800, 4000, 0, 'clperftesting-gen5-bc64-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 7),
        (80, 1, 'GEN5', 1, 'TPCC', 1000, 4000, 0, 'clperftesting-gen5-bc80-weu-01.weu14c689be44714.database.windows.net', 'tpcc4000', 30, 120, 'ProdG5', NULL, 8),
        (8, 1, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp8-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 99999, 'ProdG5', NULL, 4),
        (16, 1, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp16-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 99999, 'ProdG5', NULL, 4),
        (24, 1, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp24-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (32, 1, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp32-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (40, 1, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp40-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 99999, 'ProdG5', NULL, 4),
        (64, 1, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp64-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 30, 99999, 'ProdG5', NULL, 4),
        (80, 1, 'GEN5', 0, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-gp80-weu-01.weu14c689be44714.database.windows.net', 'cdb40000', 30, 99999, 'ProdG5', NULL, 4),
        (8, 1, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc8-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 99999, 'ProdG5', NULL, 4),
        (16, 1, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc16-weu-01.weu14c689be44714.database.windows.net', 'cdb15000', 15, 99999, 'ProdG5', NULL, 4),
        (24, 1, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc24-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (32, 1, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc32-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (40, 1, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc40-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (64, 1, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc64-weu-01.weu14c689be44714.database.windows.net', 'cdb30000', 15, 99999, 'ProdG5', NULL, 4),
        (80, 1, 'GEN5', 1, 'DataLoading', 1, 1024, 0, 'clperftesting-gen5-bc80-weu-01.weu14c689be44714.database.windows.net', 'cdb40000', 15, 99999, 'ProdG5', NULL, 4),
        -- GEN 4 STAGE
        (8, 1, 'GEN4', 0, 'CDB', 1120, 15000, 0, 'clperftesting-gen4-gp8-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'Stage', NULL, 2),
        (16, 1, 'GEN4', 0, 'CDB', 1600, 15000, 0, 'clperftesting-gen4-gp16-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'Stage', NULL, 3),
        (24, 1, 'GEN4', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen4-gp24-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'Stage', NULL, 3),
        (8, 1, 'GEN4', 1, 'CDB', 1120, 15000, 0, 'clperftesting-gen4-bc8-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'Stage', NULL, 2),
        (16, 1, 'GEN4', 1, 'CDB', 2240, 15000, 0, 'clperftesting-gen4-bc16-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'Stage', NULL, 3),
        (24, 1, 'GEN4', 1, 'CDB', 3360, 30000, 0, 'clperftesting-gen4-bc24-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'Stage', NULL, 4),
        (8, 1, 'GEN4', 0, 'TPCC', 100, 4000, 0, 'clperftesting-gen4-gp8-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 2),
        (16, 1, 'GEN4', 0, 'TPCC', 200, 4000, 0, 'clperftesting-gen4-gp16-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 3),
        (24, 1, 'GEN4', 0, 'TPCC', 300, 4000, 0, 'clperftesting-gen4-gp24-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 4),
        (8, 1, 'GEN4', 1, 'TPCC', 100, 4000, 0, 'clperftesting-gen4-bc8-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 2),
        (16, 1, 'GEN4', 1, 'TPCC', 200, 4000, 0, 'clperftesting-gen4-bc16-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 3),
        (24, 1, 'GEN4', 1, 'TPCC', 300, 4000, 0, 'clperftesting-gen4-bc24-sneu-01.neu1396d5828d931.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'Stage', NULL, 4),
        -- SVM Stage
        -- Loose
        (4, 1, 'SVMLoose', 1, 'CDB', 360, 15000, 0, 'clperftesting-gen5-bc4-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 1),
        (4, 1, 'SVMLoose', 1, 'CDB', 360, 15000, 0, 'clperftesting-gen5-gp4-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMProd', NULL, 1),
        (8, 1, 'SVMLoose', 1, 'CDB', 720, 15000, 0, 'clperftesting-gen5-bc8-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 2),
        (24, 1, 'SVMLoose', 1, 'CDB', 2160, 30000, 0, 'clperftesting-gen5-bc24-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'SVMStage', NULL, 4),
        (40, 1, 'SVMLoose', 1, 'CDB', 3600, 30000, 0, 'clperftesting-gen5-bc40-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 30, 60, 'SVMStage', NULL, 24),
        (4, 1, 'SVMLoose', 1, 'TPCC', 50, 4000, 0, 'clperftesting-gen5-bc4-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 1),
        (8, 1, 'SVMLoose', 1, 'TPCC', 100, 4000, 0, 'clperftesting-gen5-bc8-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 2),
        (24, 1, 'SVMLoose', 1, 'TPCC', 300, 4000, 0, 'clperftesting-gen5-bc24-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 4),
        (40, 1, 'SVMLoose', 1, 'TPCC', 500, 4000, 0, 'clperftesting-gen5-bc40-loose-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 30, 120, 'SVMStage', NULL, 24),
        -- Tight
        (4, 1, 'SVMTight', 0, 'CDB', 360, 15000, 0, 'clperftesting-gen5-gp4-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 1),
        (8, 1, 'SVMTight', 0, 'CDB', 720, 15000, 0, 'clperftesting-gen5-gp8-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 2),
        (16, 1, 'SVMTight', 0, 'CDB', 1440, 15000, 0, 'clperftesting-gen5-gp16-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 3),
        (24, 1, 'SVMTight', 0, 'CDB', 1600, 15000, 0, 'clperftesting-gen5-gp24-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'SVMStage', NULL, 4),
        (32, 1, 'SVMTight', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp32-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'SVMStage', NULL, 5),
        (40, 1, 'SVMTight', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp40-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 30, 60, 'SVMStage', NULL, 6),
        (64, 1, 'SVMTight', 0, 'CDB', 1600, 30000, 0, 'clperftesting-gen5-gp64-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 30, 60, 'SVMStage', NULL, 7),
        (80, 1, 'SVMTight', 0, 'CDB', 1600, 40000, 0, 'clperftesting-gen5-gp80-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb40000', 30, 60, 'SVMStage', NULL, 8),
        (4, 1, 'SVMTight', 1, 'CDB', 360, 15000, 0, 'clperftesting-gen5-bc4-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 1),
        (8, 1, 'SVMTight', 1, 'CDB', 720, 15000, 0, 'clperftesting-gen5-bc8-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb15000', 15, 60, 'SVMStage', NULL, 2),
        (24, 1, 'SVMTight', 1, 'CDB', 2160, 30000, 0, 'clperftesting-gen5-bc24-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 15, 60, 'SVMStage', NULL, 4),
        (40, 1, 'SVMTight', 1, 'CDB', 3600, 30000, 0, 'clperftesting-gen5-bc40-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'cdb30000', 30, 60, 'SVMStage', NULL, 24),
        (4, 1, 'SVMTight', 0, 'TPCC', 50, 4000, 0, 'clperftesting-gen5-gp4-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 1),
        (8, 1, 'SVMTight', 0, 'TPCC', 100, 4000, 0, 'clperftesting-gen5-gp8-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 2),
        (16, 1, 'SVMTight', 0, 'TPCC', 200, 4000, 0, 'clperftesting-gen5-gp16-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 3),
        (24, 1, 'SVMTight', 0, 'TPCC', 300, 4000, 0, 'clperftesting-gen5-gp24-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 4),
        (32, 1, 'SVMTight', 0, 'TPCC', 400, 4000, 0, 'clperftesting-gen5-gp32-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 5),
        (40, 1, 'SVMTight', 0, 'TPCC', 500, 4000, 0, 'clperftesting-gen5-gp40-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 30, 120, 'SVMStage', NULL, 6),
        (64, 1, 'SVMTight', 0, 'TPCC', 800, 4000, 0, 'clperftesting-gen5-gp64-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 30, 120, 'SVMStage', NULL, 7),
        (4, 1, 'SVMTight', 1, 'TPCC', 50, 4000, 0, 'clperftesting-gen5-bc4-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 1),
        (8, 1, 'SVMTight', 1, 'TPCC', 100, 4000, 0, 'clperftesting-gen5-bc8-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 2),
        (24, 1, 'SVMTight', 1, 'TPCC', 300, 4000, 0, 'clperftesting-gen5-bc24-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 15, 120, 'SVMStage', NULL, 4),
        (40, 1, 'SVMTight', 1, 'TPCC', 500, 4000, 0, 'clperftesting-gen5-bc40-tight-neu-00.neu187d1a144a72d.sqltest-eg1.mscds.com', 'tpcc4000', 30, 120, 'SVMStage', NULL, 24)

MERGE [slo_benchmark_config] AS target
USING @slo_benchmark_config_tmp AS source
ON (target.[processor_count] = source.[processor_count]
	AND target.[parallel_exec_cnt] = source.[parallel_exec_cnt]
    AND target.[hardware_generation] = source.[hardware_generation]
    AND target.[is_bc] = source.[is_bc]
    AND target.[benchmark_name] = source.[benchmark_name]
    AND target.[environment] = source.[environment])
        WHEN MATCHED THEN
        UPDATE SET
                [worker_number] = [source].[worker_number],
                [benchmark_scaling_argument] = [source].[benchmark_scaling_argument],
                [scaled_down] = [source].[scaled_down],
                [server_name] = [source].[server_name],
                [database_name] = [source].[database_name],
                [warmup_timespan_minutes] = [source].[warmup_timespan_minutes],
                [run_timespan_minutes] = [source].[run_timespan_minutes],
                [custom_master_tsql_query] = [source].[custom_master_tsql_query],
                [required_processor_count] = [source].[required_processor_count]
        WHEN NOT MATCHED THEN
        INSERT
        (
                [processor_count],
				[parallel_exec_cnt],
                [hardware_generation],
                [is_bc],
                [benchmark_name],
                [worker_number],
                [benchmark_scaling_argument],
                [scaled_down],
                [server_name],
                [database_name],
                [warmup_timespan_minutes],
                [run_timespan_minutes],
                [custom_master_tsql_query],
                [required_processor_count],
                [environment]
        ) VALUES
        (
                [source].[processor_count],
				[source].[parallel_exec_cnt],
                [source].[hardware_generation],
                [source].[is_bc],
                [source].[benchmark_name],
                [source].[worker_number],
                [source].[benchmark_scaling_argument],
                [source].[scaled_down],
                [source].[server_name],
                [source].[database_name],
                [source].[warmup_timespan_minutes],
                [source].[run_timespan_minutes],
                [source].[custom_master_tsql_query],
                [source].[required_processor_count],
                [source].[environment]
        );
COMMIT TRANSACTION INIT_SLO_BENCH


-- Insert data for scheduled benchmarks
SET XACT_ABORT ON

BEGIN TRANSACTION INIT_SLO_BENCH

DECLARE @scheduled_benchmarks_tmp TABLE
(
    [processor_count] INT NOT NULL,
	[parallel_exec_cnt] INT NOT NULL,
    [hardware_generation] NVARCHAR(128) NOT NULL,
    [is_bc] BIT NOT NULL,
    [benchmark_name] NVARCHAR(128) NOT NULL,
    [environment]  NVARCHAR(50) NOT NULL,
    [is_picked_up] BIT NOT NULL
)

INSERT INTO @scheduled_benchmarks_tmp
(
    [processor_count],
	[parallel_exec_cnt],
    [hardware_generation],
    [is_bc],
    [benchmark_name],
    [environment],
    [is_picked_up]
)
VALUES
        (8, 1, 'Gen4', 1 , 'CDB', 'ProdG4', 0),
        (16, 1, 'Gen4', 1 , 'CDB', 'ProdG4', 0),
        (24, 1, 'Gen4', 1 , 'CDB', 'ProdG4', 0),
        (8, 1, 'Gen4', 0 , 'CDB', 'ProdG4', 0),
        (16, 1, 'Gen4', 0 , 'CDB', 'ProdG4', 0),
        (24, 1, 'Gen4', 0 , 'CDB', 'ProdG4', 0),
        (8, 1, 'Gen4', 1 , 'TPCC', 'ProdG4', 0),
        (16, 1, 'Gen4', 1 , 'TPCC', 'ProdG4', 0),
        (24, 1, 'Gen4', 1 , 'TPCC', 'ProdG4', 0),
        (8, 1, 'Gen4', 0 , 'TPCC', 'ProdG4', 0),
        (16, 1, 'Gen4', 0 , 'TPCC', 'ProdG4', 0),
        (24, 1, 'Gen4', 0 , 'TPCC', 'ProdG4', 0),
        (8, 1, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (16, 1, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (24, 1, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (32, 1, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (40, 1, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (64, 1, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (80, 1, 'Gen5', 1 , 'CDB', 'ProdG5', 0),
        (8, 1, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (16, 1, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (24, 1, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (32, 1, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (40, 1, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (64, 1, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (80, 1, 'Gen5', 0 , 'CDB', 'ProdG5', 0),
        (8, 1, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (16, 1, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (24, 1, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (32, 1, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (40, 1, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (64, 1, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (80, 1, 'Gen5', 1 , 'TPCC', 'ProdG5', 0),
        (8, 1, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (16, 1, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (24, 1, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (32, 1, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (40, 1, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (64, 1, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (80, 1, 'Gen5', 0 , 'TPCC', 'ProdG5', 0),
        (8, 1, 'Gen4', 1 , 'CDB', 'Stage', 0),
        (16, 1, 'Gen4', 1 , 'CDB', 'Stage', 0),
        (24, 1, 'Gen4', 1 , 'CDB', 'Stage', 0),
        (8, 1, 'Gen4', 0 , 'CDB', 'Stage', 0),
        (16, 1, 'Gen4', 0 , 'CDB', 'Stage', 0),
        (24, 1, 'Gen4', 0 , 'CDB', 'Stage', 0),
        (8, 1, 'Gen4', 1 , 'TPCC', 'Stage', 0),
        (16, 1, 'Gen4', 1 , 'TPCC', 'Stage', 0),
        (24, 1, 'Gen4', 1 , 'TPCC', 'Stage', 0),
        (8, 1, 'Gen4', 0 , 'TPCC', 'Stage', 0),
        (16, 1, 'Gen4', 0 , 'TPCC', 'Stage', 0),
        (24, 1, 'Gen4', 0 , 'TPCC', 'Stage', 0),
        (4, 1, 'SVMLoose', 1 , 'CDB', 'SVMStage', 0),
        (8, 1, 'SVMLoose', 1 , 'CDB', 'SVMStage', 0),
        (24, 1, 'SVMLoose', 1 , 'CDB', 'SVMStage', 0),
        (40, 1, 'SVMLoose', 1 , 'CDB', 'SVMStage', 0),
        (4, 1, 'SVMLoose', 1 , 'TPCC', 'SVMStage', 0),
        (8, 1, 'SVMLoose', 1 , 'TPCC', 'SVMStage', 0),
        (24, 1, 'SVMLoose', 1 , 'TPCC', 'SVMStage', 0),
        (40, 1, 'SVMLoose', 1 , 'TPCC', 'SVMStage', 0),
        (4, 1, 'SVMTight', 1 , 'CDB', 'SVMStage', 0),
        (8, 1, 'SVMTight', 1 , 'CDB', 'SVMStage', 0),
        (24, 1, 'SVMTight', 1 , 'CDB', 'SVMStage', 0),
        (40, 1, 'SVMTight', 1 , 'CDB', 'SVMStage', 0),
        (4, 1, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (8, 1, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (16, 1, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (24, 1, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (32, 1, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (40, 1, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (64, 1, 'SVMTight', 0 , 'CDB', 'SVMStage', 0),
        (4, 1, 'SVMTight', 1 , 'TPCC', 'SVMStage', 0),
        (8, 1, 'SVMTight', 1 , 'TPCC', 'SVMStage', 0),
        (24, 1, 'SVMTight', 1 , 'TPCC', 'SVMStage', 0),
        (40, 1, 'SVMTight', 1 , 'TPCC', 'SVMStage', 0),
        (4, 1, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (8, 1, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (16, 1, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (24, 1, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (32, 1, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (40, 1, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0),
        (64, 1, 'SVMTight', 0 , 'TPCC', 'SVMStage', 0)

MERGE [scheduled_benchmarks] AS [target]
USING @scheduled_benchmarks_tmp AS source
ON (target.[processor_count] = source.[processor_count]
	AND target.[parallel_exec_cnt] = source.[parallel_exec_cnt]
    AND target.[hardware_generation] = source.[hardware_generation]
    AND target.[is_bc] = source.[is_bc]
    AND target.[benchmark_name] = source.[benchmark_name]
    AND target.[environment] = source.[environment])
WHEN NOT MATCHED THEN
        INSERT
        (
                [processor_count],
				[parallel_exec_cnt],
                [hardware_generation],
                [is_bc],
                [benchmark_name],
                [environment],
                [is_picked_up],
                [is_adhoc_run]
        ) VALUES
        (
                [source].[processor_count],
				[source].[parallel_exec_cnt],
                [source].[hardware_generation],
                [source].[is_bc],
                [source].[benchmark_name],
                [source].[environment],
                [source].[is_picked_up],
                0
        );
COMMIT TRANSACTION INIT_SLO_BENCH

GO

GO
